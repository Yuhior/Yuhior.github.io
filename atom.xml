<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuhior&#39;s Blog</title>
  
  <subtitle>生活不止于眼前的苟且</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-16T01:01:58.378Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yuhior</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3.0初体验</title>
    <link href="http://yoursite.com/2021/03/15/vue3/"/>
    <id>http://yoursite.com/2021/03/15/vue3/</id>
    <published>2021-03-15T05:47:23.000Z</published>
    <updated>2021-03-16T01:01:58.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久不见，甚是想念；一日不见，如隔三秋；一天不打上房揭瓦；我觉得我就属于最后一句话吧。虽说二月很短但是也不是一直不学习的理由，虽然二月有个新年，也并不是我 不学习的理由；每次来总是这样哈哈哈哈，但是闲下来是真的需要学习啊 ，我还是需要挣money ，毕竟还要面朝大海春暖花开；毕竟还要劈柴喂马周游世界；还有粮食和蔬菜；还有未来媳妇的包包哈哈哈哈未来孩子的奥利奥。尤大已经发布vue3.0 有一阵子了，各大UI库也正完成适配，可以说vue3势在必行，所以还是跟紧我们的潮流，毕竟这是一个前端人员应有的敏锐感。</p></blockquote><ol><li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>[Vue3.0中文文档]: <a href="https://vue3js.cn/docs/zh/" target="_blank" rel="noopener">https://vue3js.cn/docs/zh/</a></p></li><li><p>和vue2.X类似使用vue-cli进行脚手架安装，当然我们一会讲一下vite工具安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/6D9mi8" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/15/6D9mi8.md.png" alt="6D9mi8.md.png"></a></p></li><li><p>如果没有上述界面说明需要升级你的vue-cli的版本 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue update -g @vue/cli</span><br></pre></td></tr></table></figure></li><li><p>可以选择Vue 3 Preview，也可以选择Manually Select features 进行版本选择</p><p><a href="https://imgtu.com/i/6DCX4K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/15/6DCX4K.md.png" alt="6DCX4K.md.png"></a></p></li></ul></li><li><h4 id="浅度对比"><a href="#浅度对比" class="headerlink" title="浅度对比"></a>浅度对比</h4><ul><li><p>首先入口对比main.js（左边vue3右边vue2.x）;使用了createApp（）</p><p><a href="https://imgtu.com/i/6DiUW8" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/03/15/6DiUW8.png" alt="6DiUW8.png"></a></p></li><li><p>vue3 的 Template支持多个根标签，但是vue2.x只支持一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// vue2</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;根元素 示例&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// vue3</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;根元素 示例 0&lt;/div&gt;</span><br><span class="line">  &lt;h1&gt;根元素 示例 1&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;根元素 示例 2&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>vue3 使用组合式API</p><ul><li><p>原来vue2.x的data 、computed、watch、mounted等等都要return 出来才能访问到，当我们的组件变得更大时，<strong>逻辑关注点</strong>的列表也会增长。这可能会导致组件难以阅读和理解。（我们还是举个例子吧？我们有个一个审批的表，需要跑南边填一个选项，完了需要北边填一个选项，东边和西边也要，当你拿着这个表跑来跑去，你就会感觉很累，诶当有一天我们有个地方说这个属性可以集中把这些地方都跑了，就不用东西南北各处跑了。这不就清晰省事了 啊 ，那现在vue3中这个地方就是setup）</p></li><li><p>新的 <code>setup</code> 组件选项在创建组件<strong>之前</strong>执行，一旦 <code>props</code> 被解析，就作为组合式 API 的入口点。</p></li><li><p>warning由于在执行 <code>setup</code> 时，组件实例尚未被创建，因此在 <code>setup</code> 选项中没有 <code>this</code>。这意味着，除了 <code>props</code> 之外，你将无法访问组件中声明的任何属性——<strong>本地状态</strong>、<strong>计算属性</strong>或<strong>方法</strong></p></li><li><p>使用ref 使任何响应式变量在任何地方起作用，如下所示  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; user &#125; = toRefs(props)</span><br><span class="line"><span class="keyword">const</span> repositories = ref([])</span><br><span class="line"><span class="keyword">const</span> getUserRepositories = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 更新 `prop.user` 到 `user.value` 访问引用值</span></span><br><span class="line">  repositories.value = <span class="keyword">await</span> fetchUserRepositories(user.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意ref、reactive、toRef、toRefs的区别</p></li></ul></li><li><p>vue3中的组件上的v-model 用法已更改，替换v-bind.sync</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 在2.x中 </span><br><span class="line">&lt;ChildComponent v-model=&quot;pageTitle&quot; /&gt;</span><br><span class="line">&lt;!--是以下的简写：--&gt;</span><br><span class="line">&lt;ChildComponent :value =&quot;pageTitle&quot; @input =&quot;pageTitle=$event&quot; /&gt;</span><br><span class="line">&lt;!--如果要将属性或者事件名称改为其他，则需要在ChildComponent组件中添加model选项--&gt;</span><br><span class="line">// childCompnent.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &apos;title&apos;,</span><br><span class="line">    event: &apos;change&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">      // 这将允许 `value` 属性用于其他用途</span><br><span class="line">      value: String,</span><br><span class="line">      // 使用 `title` 代替 `value` 作为 model 的 prop</span><br><span class="line">      title: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;Default title&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  methods:&#123;</span><br><span class="line">    change()&#123;</span><br><span class="line">      this.$emit(&apos;cc&apos;,&apos;我被子组件改变了&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--所以，这个栗子中的v-model是以下的简写--&gt;</span><br><span class="line">&lt;ChildComponent :title=&quot;pageTitle&quot; @change=&quot;pageTitle = $event&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在3.x中 ，自定义组件上的v-model 相当于传递了modelValue prop并接收抛出的update：modelValue事件：</span><br><span class="line">&lt;ChildComponent v-model =&quot;pageTitle&quot; /&gt;</span><br><span class="line">&lt;!-- 是以下的简写 --&gt;</span><br><span class="line">&lt;ChildComponent :modelValue =&quot;pageTitle&quot; @update:modelValue=&quot;pageTitle=$event&quot; /&gt; </span><br><span class="line">&lt;!-- 若需要改变model名称，而不是改变组件内的model选项，那么现在我们可以将一个argument 传给model--&gt;</span><br><span class="line">&lt;ChildComponent v-model:title =&quot;pageTitle&quot;/&gt;</span><br><span class="line">&lt;!-- 是以下的简写 --&gt;</span><br><span class="line">&lt;ChildComponent :title=&quot;pageTitle&quot; @update:title=&quot;pageTitle = $event&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>新增context.emit，与this.$emit作用相同 （vue3中只能在methods中使用了，因为vue3的this与vue2的this不同了）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;SetupContext &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">setup(props: Prop, <span class="attr">context</span>: SetupContext) &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      context.emit(<span class="string">'input'</span>, !props.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;toggle&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>computed 计算属性与之前2.x 差不多，只是使用前要先引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setup(props: Prop, <span class="attr">context</span>: SetupContext) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">const</span> changCount = computed(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count.value ++</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>watchEffect监听</p><p>通过ref或者reactive去创建多个响应式的值，当任何一个值发生改变的时候，立即触发这个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setup(props: Prop, <span class="attr">context</span>: SetupContext) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">  watchEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果有不正确的理解等彻底理解透之后，随时进行更新</p></li></ul></li><li><h4 id="深度对比"><a href="#深度对比" class="headerlink" title="深度对比"></a>深度对比</h4><ul><li><p>在 vue 中， <code>Object.defineProperty</code> 无法监控到数据的下标变化，导致直接通过数组下标给数组设置新值时，无法做到实时响应。目前 vue 只针对数组的变异方法 <code>push/pop/shift/unshift/splice/sort/reverse</code> 做了 hack 处理，存在响应局限。<code>Proxy</code> 是 <code>ES6</code> 中新增的一个特性，翻译过来意思是”代理”，用在这里表示由它来“代理”某些操作。 <code>Proxy</code> 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。</p><p><code>Proxy</code> 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><p>详见上一篇</p></li></ul><p>  [Proxy]: <a href="https://yuhior.com/2020/07/18/Proxy/#more" target="_blank" rel="noopener">https://yuhior.com/2020/07/18/Proxy/#more</a></p><ul><li>其他下一篇进行补充</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好久不见，甚是想念；一日不见，如隔三秋；一天不打上房揭瓦；我觉得我就属于最后一句话吧。虽说二月很短但是也不是一直不学习的理由，虽然二月有个新年，也并不是我 不学习的理由；每次来总是这样哈哈哈哈，但是闲下来是真的需要学习啊 ，我还是需要挣money 
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="vue3.0" scheme="http://yoursite.com/tags/vue3-0/"/>
    
  </entry>
  
  <entry>
    <title>ssr2改造开始</title>
    <link href="http://yoursite.com/2021/01/06/ssr2/"/>
    <id>http://yoursite.com/2021/01/06/ssr2/</id>
    <published>2021-01-06T08:23:15.000Z</published>
    <updated>2021-01-13T07:13:48.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2021年了，新的一年应该有一个新的开始，那就从博客更新开始吧！趁着早点的时候，早点更新免得落下延迟更新的毛病，一年到头了也应该有自己的目标和上一年的总结，这个来的有点迟，不过好饭不怕晚是吧？虽然晚但是得到，这是至理名言。nice！新的一年肯定啊努力挣钱努力攒钱 ，毕竟还是得有以后啊。第二个薪资达到自己期望的值，不行就换！第三个当然也是最重要的如果明年疫情过去，条件允许当然是出去玩啊。希望明年再来看这个的时候已经达到了自己满意的地步。好了也该言归正传了，上一篇讲了ssr的理解，当然也应该具体实现一下是吧？这一趴就带你去感受vue实际怎么用ssr，大神们 的react自行度娘吧。</p></blockquote><ol><li><h4 id="同构项目"><a href="#同构项目" class="headerlink" title="同构项目"></a>同构项目</h4><p>我们构思怎么写ssr的过程中，我们想怎么在我们的项目中写一个ssr，也就是说怎么将服务端渲染在vue项目中进行启动渲染 ，前边一篇文章也说了，前端人员不安分，搞搞搞然后搞出了前端各种，然后又有了Nodejs，最后发现首屏渲染有问题哈，自己选的路跪着也要走完呀，前端用服务端渲染当然还是在前端搞啊，也就是说在原项目的基础上vue中 夹杂一个服务端，那我们就用node吧！不然还会什么？既然在vue项目中写服务端代码，那不能再用hbs模版或者ejs了吧？这样一套代码也不能同时在客户端跑又在服务端跑啊。写不一样的那就需要维护两边啦，那就提出了同构的概念，一份代码在服务端执行的时候负责渲染页面，然后代码在浏览器执行的时候负责交互。 至于 有人说异构渲染？那我不知道了，爱折腾的前端人员还没搞出来呢吧 哈哈哈</p></li><li><h4 id="node如何渲染Vue结构的代码"><a href="#node如何渲染Vue结构的代码" class="headerlink" title="node如何渲染Vue结构的代码"></a>node如何渲染Vue结构的代码</h4><p>官方提供了一个插件vue-server-renderer可以直接将vue实例渲染成Dom标记</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue  =<span class="built_in">require</span>(<span class="string">'vue'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    template:<span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步 ：创建一个renderer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步：将Vue实例渲染为HTML</span></span><br><span class="line"></span><br><span class="line">renderer.renderToString(app,(err,html)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(html);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在2.5.0+， 如果没有传入回调函数，则会返回Promise</span></span><br><span class="line"></span><br><span class="line">renderer.renderToString(app).then(<span class="function"><span class="params">html</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(html);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><h4 id="Vue中服务端怎么写？"><a href="#Vue中服务端怎么写？" class="headerlink" title="Vue中服务端怎么写？"></a>Vue中服务端怎么写？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// /home</span></span><br><span class="line">router.get(<span class="string">'/(.*)'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        url: ctx.request.url</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;访问的 URL 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        ctx.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'listen 8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上边的例子中可以看出vue-server-renderer 返回的是一个html 片段，官方叫标记（markup），并不是完整的html 页面。我们必须像上边的例子那样用一个额外的HTML也米娜包裹容器来包裹生成的HTML标记</p><p>我们可以提供一个模版页面 。 像 vue中的app页面的包裹元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<!--vue-ssr-outlet--> 注视这里将是应用程序HTML标记注入的地方。这是插件提供的，不用问为什么这就是规定哈哈哈哈，如果不用当然也可以啦 ，那你就自己去处理一下吧。大神们我当然管不了</p></li><li><h4 id="以后的思路注意点"><a href="#以后的思路注意点" class="headerlink" title="以后的思路注意点"></a>以后的思路注意点</h4><ul><li>服务端渲染的vue.js应用程序也可以被认为是“同构”或者是 “通用”，因为应用程序的大部分代码都可以在服务器和客户端上运行。</li><li>在纯客户端应用程序中，每个用户会在他们各自的浏览器中使用新的应用程序案例。对于服务端渲染来，我们也希望如此：每个应用应该是全新的、独立的应用程序案例，以便不会造成交叉请求造成的状态污染。</li></ul><hr><p>对于第一点来说</p><ul><li>我们之前一直在铺垫，服务端和客户端共用一套代码，既然在客户端和服务端都能运行，那应该有两个入口文件，一些DOM和BOM的操作在服务端肯定是不能够的。</li><li>通常Vue的应用程序是由webpack和vue-loader 构建，并且许多的webpack特定功能不能在Node.js中运行</li></ul><hr><p>对于第二点来说我们想一下原来对于客户端，我们每一个人的电脑上对应的是一个独立的客户端，也就是说你自己运行的应用程序是独立的和别人没有关系，对于服务端来说也是一样的，每个请求每个人发来的请求都应该是全新的独立的应用程序案例，以便不会有交叉造成状态污染</p></li><li><h4 id="改造正式开始"><a href="#改造正式开始" class="headerlink" title="改造正式开始"></a>改造正式开始</h4><ul><li><p>我们再来看一下 上边的服务端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="comment">// /home</span></span><br><span class="line">router.get(<span class="string">'/(.*)'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        url: ctx.request.url</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;访问的 URL 是： &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 当为其他的url的时候 ，我们获取到访问的url链接，然后再通过某种机制让当前的vm切换到这个url对应的内容区</span></span><br><span class="line">    renderer.renderToString(vm, (err, html) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          ctx.status(<span class="number">500</span>).end(<span class="string">'Internal Server Error'</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      ctx.body = <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">          &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">          &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">          &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">          &lt;/html&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br><span class="line">app.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'listen 8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上边的例子写了一个template：但是我们不可能每个url都渲染某一个固定的模版吧？那不是就炸了。所以要先搞定路由</p></li><li><p>改造路由实例 router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'../views/About.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,</span><br><span class="line">    component:About</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 导出工厂函数，他可以返回新的 Router 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    base: process.env.BASE_URL,</span><br><span class="line">    routes</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑惑了吧？为什么和脚手架开始的router 不一样，export 一个工厂函数，这里要着重了解一下:</p><p>原来的spa应用，在客户端每个人一个router 实例，不会产生污染，但在服务端大家都来访问服务器的router 不能只有一个router实例吧？这样会产生变量啊 一些东西的污染，举例子来说 客户端上你自己有一根雪糕，你自己吃，但是放到服务器上还是一根雪糕，别人来了舔一口，你还愿意吃么？哈哈哈很恶心是吧。那这就需要每个人发一根雪糕了。</p><p>服务端的每个请求，都有一个单独的实例避免在请求过程中，产生状态污染，这就是用工厂函数的意义。</p></li><li><p>构建流程</p><p><img src="https://s3.ax1x.com/2021/01/13/stOx39.png" alt></p></li><li><p>改造创建vue实例的main.js,用于创建实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>; </span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">"./router"</span>; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">context</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">const</span> router = createRouter(); </span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; </span><br><span class="line">    router, </span><br><span class="line">    context,  <span class="comment">// 这个context 是一个约定，就叫这个名字</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App) </span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123; app, router &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router实例不是单一的，那当然createApp 也不应该是单一的，所以依旧用了工厂函数，但是中间有一个context参数，context上下文 是服务器传递给vue实例的参数对象 ，  之后我们调用的时候会进行参数的传递</p></li><li><p>entry-client 客户端入口，用于静态的内容进行激活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂载创建的Vue的实例 。 将来在浏览器执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给浏览器的是静态页面需要激活</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">'./main'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app,router &#125; = createApp() ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue 模版中跟元素具有`id= app`</span></span><br><span class="line"><span class="comment">// 路由就绪，执行挂载（激活过程）</span></span><br><span class="line">router.onReady(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    app.$mount(<span class="string">'#app'</span>) <span class="comment">// 宿主问 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Entry-server 服务端的入口用于首屏内容的渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给服务器提供一个方法，可以根据接受url 设置路由地址，然后返回创建vue实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在服务器执行</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'./main'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt;&#123;   <span class="comment">//koa的context，由服务给vue的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 获取vue实例和router实例</span></span><br><span class="line">        <span class="keyword">const</span> &#123; app ,router&#125; = createApp(context); </span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 跳转至首屏</span></span><br><span class="line">        router.push(context.url) <span class="comment">// 前端路由跳转</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// onReady 完成时，异步任务都会结束, 由于有异步任务，比如首屏有请求的情况下</span></span><br><span class="line">        router.onReady(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(app);</span><br><span class="line">        &#125;,reject)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分析一下流程上边的流程</p><p>request =&gt; Koa =&gt; main.js  =&gt;   router/index.js</p><p>请求      处理请求   生成vue实例 生成router实例</p></li><li><p>进行我们的打包配置 vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个插件分别负责打包客户端和服务端</span></span><br><span class="line"><span class="keyword">const</span> VueSSRServerPlugin = <span class="built_in">require</span>(<span class="string">"vue-server-renderer/server-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> VueSSRClientPlugin = <span class="built_in">require</span>(<span class="string">"vue-server-renderer/client-plugin"</span>);</span><br><span class="line"><span class="comment">// 外置化，用于优化打包速度和体积</span></span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">"webpack-node-externals"</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"lodash.merge"</span>);</span><br><span class="line"><span class="comment">// 根据传入环境变量决定入口文件和相应配置项</span></span><br><span class="line"><span class="keyword">const</span> TARGET_NODE = process.env.WEBPACK_TARGET === <span class="string">"node"</span>;</span><br><span class="line"><span class="keyword">const</span> target = TARGET_NODE ? <span class="string">"server"</span> : <span class="string">"client"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  outputDir: <span class="string">"./dist/"</span> + target,</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 将 entry 指向应用程序的 server / client 文件</span></span><br><span class="line">    entry: <span class="string">`./src/entry-<span class="subst">$&#123;target&#125;</span>.js`</span>,</span><br><span class="line">    <span class="comment">// 对 bundle renderer 提供 source map 支持</span></span><br><span class="line">    devtool: <span class="string">"source-map"</span>,</span><br><span class="line">    <span class="comment">// target设置为node使webpack以Node适用的方式处理动态导入，</span></span><br><span class="line">    <span class="comment">// 并且还会在编译Vue组件时告知`vue-loader`输出面向服务器代码。</span></span><br><span class="line">    target: TARGET_NODE ? <span class="string">"node"</span> : <span class="string">"web"</span>,</span><br><span class="line">    <span class="comment">// 是否模拟node全局变量</span></span><br><span class="line">    node: TARGET_NODE ? <span class="literal">undefined</span> : <span class="literal">false</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      <span class="comment">// 此处使用Node风格导出模块</span></span><br><span class="line">      libraryTarget: TARGET_NODE ? <span class="string">"commonjs2"</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// https://webpack.js.org/configuration/externals/#function</span></span><br><span class="line">    <span class="comment">// https://github.com/liady/webpack-node-externals</span></span><br><span class="line">    <span class="comment">// 外置化应用程序依赖模块。可以使服务器构建速度更快，并生成较小的打包文件。</span></span><br><span class="line">    externals: TARGET_NODE</span><br><span class="line">      ? nodeExternals(&#123;</span><br><span class="line">          <span class="comment">// 不要外置化webpack需要处理的依赖模块。</span></span><br><span class="line">          <span class="comment">// 可以在这里添加更多的文件类型。例如，未处理 *.vue 原始文件，</span></span><br><span class="line">          <span class="comment">// 还应该将修改`global`（例如polyfill）的依赖模块列入白名单</span></span><br><span class="line">          whitelist: [<span class="regexp">/\.css$/</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      : <span class="literal">undefined</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">      splitChunks: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这是将服务器的整个输出构建为单个 JSON 文件的插件。</span></span><br><span class="line">    <span class="comment">// 服务端默认文件名为 `vue-ssr-server-bundle.json`</span></span><br><span class="line">    <span class="comment">// 客户端默认文件名为 `vue-ssr-client-manifest.json`。</span></span><br><span class="line">    plugins: [TARGET_NODE ? <span class="keyword">new</span> VueSSRServerPlugin() : <span class="keyword">new</span> VueSSRClientPlugin()]</span><br><span class="line">  &#125;),</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">"vue"</span>)</span><br><span class="line">      .use(<span class="string">"vue-loader"</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        merge(options, &#123;</span><br><span class="line">          optimizeSSR: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意： 上边的根据环境变量决定入口文件和相应配置项 如果TARGET_NODE为node 那么target 为entry-server.js 入口，否则则是entry-client.js 入口</p></li><li><p>package.json 修改一下，也就是需要 再执行npm run build 的时候需要 同时打包服务端和客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 主要修改 打包入口 npm run build 执行npm run build:server 和npm run build:client"  同时在打包</span></span><br><span class="line">  <span class="comment">//"build:server"时传递一个变量 WEBPACK_TARGET=node  这样入口文件就是entry-server.js了</span></span><br><span class="line">  <span class="comment">//--mode server设置成了服务端渲染的模式了</span></span><br><span class="line">  <span class="comment">// cross-env  用于跨平台设置环境变量</span></span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line">    <span class="string">"build:client"</span>: <span class="string">"vue-cli-service build"</span>,</span><br><span class="line">    <span class="string">"build:server"</span>: <span class="string">"cross-env WEBPACK_TARGET=node vue-cli-service build --mode server"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"npm run build:server &amp;&amp; npm run build:client"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打包之后的目录结构 </p><p>-dist</p><p>​    -client</p><p>​        - js</p><p>​        - index.html</p><p>​        - vue-ssr-client-manifest.json</p><p>​    -server</p><p>​        -vue-ssr-server-bundle.json</p></li><li><p>宿主文件 ：服务端渲染还是需要一个宿主文件的     ./public/index.html  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>服务端渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span>    是服务端渲染的插口</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上边的服务端代码并不完整，只是引出 router的改造，所以最后我们需要写 服务端代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载本地文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="comment">// 处理url</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 1 步：开放dist/client目录，由于在改目录下有需要加载的js文件，需要开放改目录 关闭默认下载index页的选项，不然到不了后面路由</span></span><br><span class="line"><span class="comment">// static 特性 只要url 中有/ 默认访问index.html ,恰好该目录下有一个index.html ,避免直接访问了index.html </span></span><br><span class="line">app.use(express.static(resolve(<span class="string">'../dist/client'</span>), &#123;<span class="attr">index</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：获得一个createBundleRenderer</span></span><br><span class="line"><span class="keyword">const</span> &#123; createBundleRenderer &#125; = <span class="built_in">require</span>(<span class="string">"vue-server-renderer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 3 步：导入服务端打包文件</span></span><br><span class="line"><span class="keyword">const</span> bundle = <span class="built_in">require</span>(resolve(<span class="string">"../dist/server/vue-ssr-server-bundle.json"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 4 步：创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> template = fs.readFileSync(resolve(<span class="string">"../public/index.html"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="keyword">const</span> clientManifest = <span class="built_in">require</span>(resolve(<span class="string">"../dist/client/vue-ssr-client-manifest.json"</span>));</span><br><span class="line"><span class="keyword">const</span> renderer = createBundleRenderer(bundle, &#123;</span><br><span class="line">  runInNewContext: <span class="literal">false</span>, <span class="comment">// https://ssr.vuejs.org/zh/api/#runinnewcontext</span></span><br><span class="line">  template, <span class="comment">// 宿主文件</span></span><br><span class="line">  clientManifest <span class="comment">// 客户端清单</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由是通配符，表示所有url都接受</span></span><br><span class="line">app.get(<span class="string">'*'</span>, <span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 设置url和title两个重要参数</span></span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    title:<span class="string">'ssr test'</span>,</span><br><span class="line">    url:req.url <span class="comment">// 首屏地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> renderer.renderToString(context);</span><br><span class="line">  res.send(html)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>;</span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server started at localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h4><p>request 发送请求之后  =&gt; 到达 服务端Koa ，服务端进行处理路由，在处理路由的过程中，createBundleRenderer会处理将context发送给main.js  =&gt; main.js 拿到之后进行服务端的将context 传给vue实例 ，然后对 写的vue 文件 renderToString。 </p><p>总之总体来说就是 服务端用原来写的vue组件什么的 渲染出首屏，之后客户端进行激活，之后切换路由就是客户端的单页面应用，</p><p>url不变的情况下。如果url产生变化那么再次渲染，这也是首屏的理解，首屏并不是首页。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2021年了，新的一年应该有一个新的开始，那就从博客更新开始吧！趁着早点的时候，早点更新免得落下延迟更新的毛病，一年到头了也应该有自己的目标和上一年的总结，这个来的有点迟，不过好饭不怕晚是吧？虽然晚但是得到，这是至理名言。nice！新的一年肯定啊努
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="ssr" scheme="http://yoursite.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>ssr首屏渲染你懂了么？</title>
    <link href="http://yoursite.com/2020/12/30/ssr/"/>
    <id>http://yoursite.com/2020/12/30/ssr/</id>
    <published>2020-12-30T02:55:42.000Z</published>
    <updated>2021-01-04T05:49:39.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>被迫营业—人间不值得，时隔两天我又来了，主要是我太爱东搞搞西搞搞啦，太爱学习也是一种负担啊，（被迫营业），这么冷的天还要努力学习看东西（人间不值得），这两天真的是冷啊。冷的冻掉了鼻子，不知道是鼻子太大还是天气太冷总有一种传了多少的裤子还是没穿一样，走在路上心里恐慌得不行，生怕哪个草丛跳出来三个壮汉一个姓德名马一个姓德名邦 一个姓德名…不对不对。蛮王不姓德。回来讲正事，一直对首屏渲染得实施方案有些好奇，因为开发成本太高所以也没有实战过一下。今天就整理一下最近对ssr的理解吧，不喜勿喷纯做个人记录。</p></blockquote><ol><li><h4 id="服务端渲染定义"><a href="#服务端渲染定义" class="headerlink" title="服务端渲染定义"></a>服务端渲染定义</h4><p>讲这个之前必不可少需要讲一下页面的渲染流程</p><ol><li>浏览器通过请求得到一个HTML文本</li><li>渲染进程解析HTML文本，构建DOM树</li><li>解析HTML的同时，如果遇到内联样式或者样式脚本，则下载并构建样式规则（stytle rules），若遇到JavaScript脚本，则会下载执行脚本</li><li>DOM树和样式规则构建完成之后，渲染进程将两者合并成渲染树（render tree）</li><li>渲染进程开始对渲染树进行布局，生成布局树（layout tree）</li><li>渲染进程对布局树进行绘制，生成绘制记录</li><li>渲染进程的对布局树进行分层，分别栅格化每一层，并得到合成帧</li><li>渲染进程将合成帧信息发送给GPU进程显示到页面中</li></ol><p><img src="https://s3.ax1x.com/2020/12/30/rLuY8K.png" alt></p><p>从图中我们可以发现，浏览器从接收到HTML到渲染成页面经历很多步骤。当前流行的前端框架都是使用了javascript进行页面渲染的也就是说在执行 JavaScript 脚本的时候，HTML页面已经开始解析并且构建DOM树了，JavaScript 脚本只是动态的改变 DOM 树的结构，使得页面成为希望成为的样子，这种渲染方式叫动态渲染，也可以叫客户端渲染。</p><p>服务端渲染：顾名思义，服务端渲染就是在浏览器请求页面URL的时候，服务端将我们需要的HTML文本组装好，并返回给浏览器，这个HTML文本被浏览器解析之后，不需要经过 JavaScript 脚本的执行，即可直接构建出希望的 DOM 树并展示到页面中。这个服务端组装HTML的过程，叫做服务端渲染。以我的话来讲就是后端服务器返回html的字符串然后直接喂给浏览器，其实就是一个静态页面的感觉，这样浏览器干的工作是真滴少啊，这样浏览器那反应肯定哇哇快</p></li></ol><p>   <img src="https://s3.ax1x.com/2020/12/31/rX6P4s.png" alt></p><hr><p>   虽然很长的文字但要耐心读完收益匪浅</p><ol start="2"><li><h4 id="ssr-发展的由来（远古时代一神统领到众神争霸）"><a href="#ssr-发展的由来（远古时代一神统领到众神争霸）" class="headerlink" title="ssr 发展的由来（远古时代一神统领到众神争霸）"></a>ssr 发展的由来（远古时代一神统领到众神争霸）</h4><ol><li><h5 id="WEB1-0-的时代（远古圣王）"><a href="#WEB1-0-的时代（远古圣王）" class="headerlink" title="WEB1.0 的时代（远古圣王）"></a>WEB1.0 的时代（远古圣王）</h5><p>远古时代我们可能没有经历过，但是asp 、jsp这些可能都听说过吧 ，所有的应用都是服务端渲染（这时候的服务端渲染和我们现在说的服务端渲染不一样），话说那个时候页面渲染完全由服务端承担，浏览器请求页面的url ，然后服务器接受到请求之后，到数据库查询。将数据丢到后端的模版（asp、jsp）渲染成html片段组装片段 最后返回给浏览器。这个时候返回的HTML已经是完整的了包含js什么的，渲染到页面的过程中没有Javascript的参与。如图讲述</p><p><img src="https://s3.ax1x.com/2020/12/30/rLh8oD.png"></p><p><u>页面的F12  查看张这样</u></p><p><img src="https://s3.ax1x.com/2020/12/30/rL5grq.png"></p></li><li><h5 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h5><p>讲一点题外话：WEB1.0时代那样的服务器渲染缺点越来越严重，每次更新页面上的一个小的地方不管是文字还是其他的小模块，都需要重新请求一次页面，重新查一遍数据库，重新组成一个HTML。javascript 代码和后端的PHP代码混在一起。越来越难搞。当然在这个时候前端职位很低 ，前端的工作经常是后端人员一把梭哈，前端人员经常被后端人员支配，支配的恐惧来袭，前后端鄙视链开始了，因为前端程序猿只是再写写js 做做页面交互，不算事真正的程序猿。</p><p>之后nodejs出现，前端看到了翻身的契机，为了摆脱后端的指指点点，前端开启了一场前后端分离的运动，希望可以脱离后端独立发展。前后端分离，表面上看上去是代码分离，实际上是为了前后端人员分离（到这里不得不说前端人员的心机真的是哈哈哈哈哈），也就是前后端分家，前端不再归属于后端团队。</p><p>前后端分离之后，网页开始被当成了独立的应用程序（SPA，Single Page Application），前端团队接管了所有页面渲染的事，后端团队只负责提供所有数据查询与处理的API</p><p>大体流程是这样的：首先浏览器请求URL，前端服务器直接返回一个空的静态HTML文件（不需要任何查数据库和模板组装），这个HTML文件中加载了很多渲染页面需要的 JavaScript 脚本和 CSS 样式表，浏览器拿到 HTML 文件后开始加载脚本和样式表，并且执行脚本，这个时候脚本请求后端服务提供的API，获取数据，获取完成后将数据通过JavaScript脚本动态的将数据渲染到页面中，完成页面显示。</p><p><img src="https://s3.ax1x.com/2020/12/30/rOPTAO.jpg"></p><p><u>页面的F12  查看张这样</u></p><p><img src="https://s3.ax1x.com/2020/12/30/rLODit.png"></p></li><li><h5 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h5><p>终于讲到我们的正题了，随着单页面应用的发展。人们渐渐发现了一个东西啊，诶SEO出现问题了啊，搜索引擎很难爬到东西啊。而且应用越来越复杂javaScript越来越臃肿啊，使得首屏渲染的时间要比WEB1.0慢了啊。这可是大问题啊 ，<strong>强调一下首屏并不是首页（划重点）</strong>。</p><p>这没得办法勒 ，总不能再回去受后台人员支配吧？支配的恐惧又来了哈哈哈哈，怎么办 自己选的路跪着也要走完，于是前端团队又开始了，我发现这前端真是能折腾啊（不过我喜欢哈哈哈）</p><p>于是前端团队选择了使用 nodejs 在服务器进行页面的渲染，进而再次出现了服务端渲染。大体流程与客户端渲染有些相似，</p><ol><li>首先是浏览器请求URL，前端服务器接收到URL请求之后，根据不同的URL，前端服务器向后端服务器请求数据，请求完成后，</li><li>前端服务器会组装一个携带了具体数据的HTML文本，并且返回给浏览器，浏览器得到HTML之后开始渲染页面</li><li>同时，浏览器加载并执行 JavaScript 脚本，给页面上的元素绑定事件，让页面变得可交互，当用户与浏览器页面进行交互，如跳转到下一个页面时，浏览器会执行 JavaScript 脚本，</li><li>向后端服务器请求数据，获取完数据之后再次执行 JavaScript 代码动态渲染页面。 你们知道的该上图了啊</li></ol><p><img src="https://s3.ax1x.com/2020/12/31/rXoP1g.png" alt></p></li></ol></li><li><h4 id="服务端渲染的优缺点"><a href="#服务端渲染的优缺点" class="headerlink" title="服务端渲染的优缺点"></a>服务端渲染的优缺点</h4><p>优点有二</p><ol><li>利于SEO ，不言而喻 ，相比于一个空壳的div块来说，页面上显示更多内容更利于爬虫来爬你的页面，这样流量也就会越高搜索引擎收录也就会越多。</li><li>白屏时间更多，相比于客户端渲染，服务端渲染在浏览器请求URL之后已经得到了一个呆数据的的HTML文本，浏览器只需要解析HTML，直接构建DOM树就可以了。而客户端需要先得到一个空的HTML页面，这几个时候页面进入了白屏状态，之后还需要经过加载并执行javascript，请求后端获取数据、Javascript渲染页面的几个过程才能看到最后的页面，时间长体验差。</li></ol><p>缺点</p><ol><li>为实现服务端渲染，代码复杂度增大，代码中的需要兼容服务端和客户端两种运行情况。</li><li>需要更多的负载均衡，服务器压力大</li><li>部署和构建的设置的要求更高需要懂Nodejs</li></ol></li><li><h4 id="Vue-进行剖析实践-终于要上代码啦-（-画图真的很难）"><a href="#Vue-进行剖析实践-终于要上代码啦-（-画图真的很难）" class="headerlink" title="Vue 进行剖析实践 终于要上代码啦 （ 画图真的很难）"></a>Vue 进行剖析实践 终于要上代码啦 （ 画图真的很难）</h4><p><a href="https://s3.ax1x.com/2020/12/30/rOlO2t.png" target="_blank" rel="noopener">下一篇地址</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;被迫营业—人间不值得，时隔两天我又来了，主要是我太爱东搞搞西搞搞啦，太爱学习也是一种负担啊，（被迫营业），这么冷的天还要努力学习看东西（人间不值得），这两天真的是冷啊。冷的冻掉了鼻子，不知道是鼻子太大还是天气太冷总有一种传了多少的裤子还是没穿一样，
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="ssr" scheme="http://yoursite.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>闭包你理解了么？</title>
    <link href="http://yoursite.com/2020/12/24/colsure/"/>
    <id>http://yoursite.com/2020/12/24/colsure/</id>
    <published>2020-12-24T08:14:21.000Z</published>
    <updated>2020-12-28T07:06:09.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>都说包治百病，包治百病，今天我也带了一个名牌包包，不知道能不能治疗百病，猜猜是什么牌子，考验你对牌子的认识能力的时刻到了，LV、Prada、HERMES、CHANEL、Gucci、Versace、Coach反正我就知道这几个了太难了，但是通通都不是。今天给大家带来的是闭包。JavaScript中闭包这个点，相信很多的前端程序猿都听说过，不管是初级的还是高级的，而且是面试当中很容易被问到的一个，大家可能在对这个点的理解上，不太深刻。当然大佬们轻喷我泛指我一类的渣渣，毕竟人外有人天外有天，始终保持敬畏还是好的。那我们今天就开搞吧</p></blockquote><ol><li><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>提到闭包之前不得不提一下作用域的问题，在执行代码前很多的变量已经定义好。作用域里面保存的信息，在你写代码的时候已经决定了，而且会一直保持这个作用域不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b= a+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="number">999</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n= a+ b+c;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    handle(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="comment">// 输出 9</span></span><br></pre></td></tr></table></figure><p>我们用数学的集合的思想看一下作用域 。</p><p><img src="https://s3.ax1x.com/2020/12/28/ro6N9g.png" alt></p><p>1、查找标识符的过程会始终从当前作用域开始，然后逐级地向外层嵌套的作用域展开，直到找到标识符，或抵达最外层的作用域（也就是全局作用域）为止，如果找不到标识符，通常会导致错误发生。<br>2、每个执行环境都可以进入到外层作用域中查找标识符，但不能进入到内层作用域中查找标识符。</p></li><li><h4 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h4><p>闭包是指有权访问另一个函数作用域中的变量的函数。从定义中我们可以得出两个结论 </p><ul><li>可以在函数的外部访问到函数内部的局部变量。 </li><li>让这些变量始终保存在内存中，不会随着函数的结束而自动销毁。</li></ul><p>JavaScript高级程序设计（第3版）对作用域链的描述如下：</p><blockquote><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即 arguments 对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p></blockquote><p>所以这样我们就知道，能够访问一个函数A内部变量的除了这个函数A本身之外，其函数A所生成的包含环境中所在的函数B也可以访问。而知道了这一点我们就可以很容易猜到闭包的原理。那就是既然函数A内部所在的其它函数B可以访问到当前函数A的内部变量，那么如果我们将其内部所在的其它函数B作为返回值将其返回，并在函数A的外部用一个变量C来接收到这个返回值。那么这样，在函数A外部操作这个变量C时，实际上就是在操作函数A的返回值，也就是函数A所生成的包含环境中所在的内部函数B。而这个内部函数B是有权访问到函数A的内部变量的，所以在函数A外部的变量也就可以访问到函数A内部的变量。</p></li><li><h4 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h4><p>来吧 举栗子吧 不举栗子都不能讲清楚我的理解了 哈哈哈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">childFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    childFn();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure><p>上边的函数 属于闭包么？ 那就看看函数会不会一直保持对定义时所处作用域的引用。上边的 栗子肯定能保持啊，只是好像不是我们看见的标准的那样的闭包写法，那我们就来改一下吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">childFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> childFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handle = fn();</span><br><span class="line">handle();</span><br></pre></td></tr></table></figure><p>在创建fn函数时，会创建一个预先包含<u>全局对象的作用域链</u> ，这个作用域链保存在内部的[[Scope]]属性当中。当调用fn函数的时候，会为函数创建一个执行环境，然后通过复制函数的[[Scope]]属性中的对象构成<u>执行环境的作用域链</u>，在函数childFn函数中实际上将fn的活动对象添加到了自己的作用域中，所以childFn函数的的作用域链被初始化为包含着父函数活动对象和全局变量对象。也就导致了当fn函数执行完毕后，并不会销毁，因为在childFn函数的作用域对象仍引用着这个活动。</p><p><img src="https://s3.ax1x.com/2020/12/28/rTC0MD.jpg" alt></p></li><li><h4 id="闭包和变量"><a href="#闭包和变量" class="headerlink" title="闭包和变量"></a>闭包和变量</h4><p>作用域链的这种配置机制引出了一个副作用 ，即闭包只能取得包含中任何变量的最后的一个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result  = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    result[i]= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">createFunctions()</span><br></pre></td></tr></table></figure><p>函数回返回一个数组，表面上好像是返回每一个函数的都应该返回自己的索引值，即位置0 的函数返回 0 ，1 的位置返回1 以此类推。但实际上每个函数都返回的10 ，因为每个函数作用域中都保存着createFunctions（）函数的活动对象，所以他们都是同一个变量当createFunctions（）函数返回后，变量i的值都是10 </p><p><img src="https://s3.ax1x.com/2020/12/28/rTFqJI.png" style="zoom:50%;"></p></li><li><h4 id="回调函数中闭包的使用"><a href="#回调函数中闭包的使用" class="headerlink" title="回调函数中闭包的使用"></a>回调函数中闭包的使用</h4><p>我们试一试回调函数中，是否仍然可以持有对定义时作用域的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">111</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">childFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runFn</span>(<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    callBack();</span><br><span class="line">&#125;</span><br><span class="line">runFn(fn());</span><br><span class="line"><span class="comment">//输出：111</span></span><br></pre></td></tr></table></figure><p>同步函数的回调支持定义时作用域的引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">111</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">childFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runFn</span>(<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callBack();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line">runFn(fn());</span><br><span class="line"><span class="comment">//输出：111</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;都说包治百病，包治百病，今天我也带了一个名牌包包，不知道能不能治疗百病，猜猜是什么牌子，考验你对牌子的认识能力的时刻到了，LV、Prada、HERMES、CHANEL、Gucci、Versace、Coach反正我就知道这几个了太难了，但是通通都不是
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue + mongodb 的后台权限分配</title>
    <link href="http://yoursite.com/2020/11/09/authority/"/>
    <id>http://yoursite.com/2020/11/09/authority/</id>
    <published>2020-11-09T03:09:15.000Z</published>
    <updated>2020-11-09T07:44:04.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人嘛总会有很多借口去拖延一件事，我发现这种人真的是无敌的用那个词怎么讲？哦对就是神烦。你看看我一天天的距离上次更新博客很长时间了吧？一直在忙忙周一到周五不是在上班就是在上班路上哈哈哈，反正就是没有一天在闲着，然后就是嘛…..,hahhahh 就拖着 就那么硬拖，我不是也没找理由 哈哈哈哈，貌似上边已经找了，反正吧，爱咋咋吧你能把我咋着吧！不好意思，先容我跪好哈哈哈。还好我足智多谋，看了个电视剧写了个观后感，灵机一动直接更新到博客，不能只看技术不看精神世界是吧？嗯！可以的！理由都衔接的这么完美。话说最近记忆力不太好，睡不着觉的时候，我想数数羊吧，数着数着，突然一个小羊瞥了我一眼并且非常不屑的说：“你已经数过我一次了”，我天我真的是居然被一只羊嘲笑了。哎人生啊，真的是 “卧槽，无情！”。好了最近没有更新多说了一点还是言归正传吧，上回书说到使用mongodb + vue完成登陆，这次我们要来搞一下后台的页面权限控制。来吧展示。</p></blockquote><ul><li><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><ul><li><p>公共页面不需要用户登陆的路由肯定有一个静态路由表  constantRouterMap</p></li><li><p>在前端肯定有一个带权限路由表 asyncRouterMap</p></li><li><p>后端有一整套的动态路由表存储</p></li><li><p>登陆时获取到用户的用户角色</p></li><li><p>使用Vue Router 路由守卫进行是否有权限进入的或者说存在权限菜单项的判断</p></li><li><p>发送用户角色到后台，返回可访问的路由相关信息，和前端存储的路由表进行匹配</p></li><li><p>使用router.addRoutes 方法进行动态路由的添加</p></li><li><p>思路图 </p><p><img src="https://s1.ax1x.com/2020/11/09/B7WWSe.png" alt></p></li></ul></li><li><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><ul><li><h5 id="Vue前端逻辑源码"><a href="#Vue前端逻辑源码" class="headerlink" title="Vue前端逻辑源码"></a>Vue前端逻辑源码</h5><ol><li><p>路由守卫，守的就是底线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//手动跳转的页面白名单</span></span><br><span class="line">  <span class="keyword">const</span> whiteList = [</span><br><span class="line">    <span class="string">'/'</span>,</span><br><span class="line">    <span class="string">'/home'</span>,</span><br><span class="line">    <span class="string">'404'</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/home"</span>,</span><br><span class="line">      name: <span class="string">"Home"</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">"/login"</span>,</span><br><span class="line">      name: <span class="string">"Login"</span>,</span><br><span class="line">      component: Login,</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    base: process.env.BASE_URL,</span><br><span class="line">    routes:constantRouterMap</span><br><span class="line">  &#125;);</span><br><span class="line">  router.beforeEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (Cookie.getCookie(<span class="string">'username'</span>)) &#123; <span class="comment">// 验证是否已经登陆过了</span></span><br><span class="line">      <span class="keyword">if</span> (to.path!==<span class="string">'/login'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (store.state.menuList.length!==<span class="number">0</span>) &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          store.dispatch(<span class="string">'getPermission'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            store.dispatch(<span class="string">'getPermissionList'</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="comment">// .....进行路由合并</span></span><br><span class="line">              &#123;  <span class="comment">// 此处需特别注意置于最底部</span></span><br><span class="line">                path: <span class="string">"/404"</span>,</span><br><span class="line">                name: <span class="string">"notFound"</span>,</span><br><span class="line">                component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/layout/404.vue'</span>)</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                path: <span class="string">"*"</span>, <span class="comment">// 此处需特别注意置于最底部</span></span><br><span class="line">                redirect: <span class="string">"/404"</span> <span class="comment">//无匹配到的路径自动重定向到404页面</span></span><br><span class="line">              &#125;</span><br><span class="line">              ]</span><br><span class="line">              router.addRoutes(accessRoutes) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">              next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            router.replace(<span class="string">'/login'</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">'已经登陆过了'</span>);</span><br><span class="line">        <span class="comment">// 跳转默认的页面</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 免登陆白名单 直接进入</span></span><br><span class="line">        next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path !== <span class="string">'/login'</span>) &#123;</span><br><span class="line">          <span class="comment">// 重定向到登录页面 不能这么写 因为假如之前的角色是 管理员页面 后又登陆了非管理员 重定向的页面就可能不存在,就会导致404</span></span><br><span class="line">          next(<span class="string">`/home?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">          <span class="comment">//next('/login');</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p>Vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 把后台返回的的路由和前端路由表中的路由进行</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>routes </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>roles </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">recursionRouter</span>(<span class="params">userRouter, allRouter </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> realRoutes = []</span><br><span class="line">    allRouter.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        userRouter.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.name === v.name) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.children &amp;&amp; item.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    v.children = recursionRouter(item.children, v.children)</span><br><span class="line">                &#125;</span><br><span class="line">                realRoutes.push(v)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> realRoutes</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'USER_TOKEN'</span>)) || <span class="string">''</span> <span class="comment">// 用户信息</span></span><br><span class="line">  <span class="keyword">const</span> userRoles = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'USER_ROLE'</span>))|| <span class="string">''</span> <span class="comment">// 用户角色</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      token,</span><br><span class="line">      userRoles,</span><br><span class="line">      menuList:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    strict:<span class="literal">true</span>, <span class="comment">// 使用严格模式</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">      setUserToken(state,token)&#123;</span><br><span class="line">        <span class="comment">//alert(token);</span></span><br><span class="line">        state.token= token;</span><br><span class="line">      &#125;,</span><br><span class="line">      SaveLoginInfo(state,userRoles)&#123;</span><br><span class="line">        state.userRoles = userRoles</span><br><span class="line">      &#125;,</span><br><span class="line">      setPermissList(state,data)&#123;</span><br><span class="line">        state.menuList  = data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      getPermission(&#123;commit,state&#125;)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">          api.GetPermission(&#123;</span><br><span class="line">            userRole:state.userRoles</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            commit(<span class="string">'setPermissList'</span>,res.permission);</span><br><span class="line">            resolve(res.permission);</span><br><span class="line">          &#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">           reject(err)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      getPermissionList(&#123; state &#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> permissionList = []</span><br><span class="line">          permissionList = recursionRouter(state.menuList, asyncRouterMap);</span><br><span class="line">          resolve(permissionList)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据路由生成的菜单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;el-aside width=&quot;201px&quot;  height=&quot;100vh&quot;</span><br><span class="line">        class=&quot;app-side app-side-left&quot;</span><br><span class="line">        :class=&quot;isCollapse ? &apos;app-side-collapsed&apos; : &apos;app-side-expanded&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div class=&quot;app-side-logo&quot;&gt;</span><br><span class="line">          &lt;img</span><br><span class="line">            src=&quot;@/assets/logo.png&quot;</span><br><span class="line">            :width=&quot;isCollapse ? &apos;60&apos; : &apos;60&apos;&quot;</span><br><span class="line">            height=&quot;60&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;!-- 我是样例菜单 --&gt;</span><br><span class="line">          &lt;el-menu style=&quot;height:calc(100vh - 62px);overflow-y:auto; min-width:201px&quot;</span><br><span class="line">            :default-openeds= &quot;[&apos;0&apos;,&apos;1&apos;]&quot;</span><br><span class="line">            class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">            :router=&quot;true&quot;</span><br><span class="line">            :default-active=&quot;this.$route.path&quot;</span><br><span class="line">            @open=&quot;handleOpen&quot;</span><br><span class="line">            @close=&quot;handleClose&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-submenu  v-for=&quot;(item,index) in activeMenuList&quot; :key=&quot;index&quot; :index=&quot;index+&apos;&apos;&quot;&gt;</span><br><span class="line">                &lt;template slot=&quot;title&quot;  &gt;</span><br><span class="line">                  &lt;i :class=&quot;item.type&quot; &gt;&lt;/i&gt;</span><br><span class="line">                  &lt;span  slot=&quot;title&quot;&gt;&#123;&#123;item.text&#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">                &lt;div v-for=&quot;(c,cindex) in item.children&quot; :key=&quot;cindex&quot; &gt;</span><br><span class="line">                    &lt;el-menu-item :index=&quot;&apos;/user/&apos;+item.path+ &apos;/&apos;+ c.path&quot; &gt;&#123;&#123;c.text&#125;&#125;&lt;/el-menu-item&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-submenu&gt;</span><br><span class="line">          &lt;/el-menu&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  //import asyncRouterMap from &apos;./../../router/asyncRouterMap&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isCollapse: true,</span><br><span class="line">        menuItemData:[],</span><br><span class="line">        openList:[],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleOpen(key, keyPath) &#123;</span><br><span class="line">        console.log(key, keyPath);</span><br><span class="line">      &#125;,</span><br><span class="line">      handleClose(key, keyPath) &#123;</span><br><span class="line">        console.log(key, keyPath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted ()&#123;</span><br><span class="line">      this.menuItemData = this.$store.state.menuList;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      activeMenuList:function()&#123;</span><br><span class="line">        return this.menuItemData.filter(function(item)&#123;</span><br><span class="line">          return item.children.length&amp;&amp;item.children</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="mongodb逻辑源码"><a href="#mongodb逻辑源码" class="headerlink" title="mongodb逻辑源码"></a>mongodb逻辑源码</h5><ol><li><p>主要是根据用户的角色返回对应角色的路由信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/getpermission'</span>,<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx,next</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;userRole&#125; = ctx.request.body;</span><br><span class="line">  <span class="keyword">if</span> (!userRole) <span class="keyword">return</span> ctx.body = &#123;<span class="attr">code</span>:<span class="number">4020</span>,<span class="attr">msg</span>:<span class="string">'该用户没有任何的权限'</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> args = &#123;<span class="attr">userRole</span>:userRole&#125;;</span><br><span class="line">  <span class="keyword">const</span> userRouters  = <span class="keyword">await</span> getRouters.query(args);</span><br><span class="line">  <span class="comment">//console.log(userRouters)</span></span><br><span class="line">  ctx.body = (userRouters.code ===<span class="number">200</span>) ? &#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">msg</span>:<span class="string">"获取权限成功"</span>,<span class="attr">permission</span>:userRouters.routerList&#125; : userRouters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Models 模块下的父路由和子路由  (这里踩了一个坑，当时认为mongodb的表直接把父路由和子路由直接写在一个表里，这样造成了很复杂的循环嵌套，请教了当时网上的一个大神，当时不明白，后来还是问后端的朋友才理解。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose  =<span class="built_in">require</span>(<span class="string">'../db'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; model ,Schema&#125; = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> PermissionSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  text:<span class="built_in">String</span>,</span><br><span class="line">  type:<span class="built_in">String</span>,</span><br><span class="line">  children:<span class="built_in">Array</span>,</span><br><span class="line">  userRoles:<span class="built_in">Array</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> RouteModel  = model(<span class="string">"parent_routers"</span>,PermissionSchema);</span><br><span class="line"><span class="built_in">module</span>.exports = RouteModel</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose  =<span class="built_in">require</span>(<span class="string">'../db'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; model ,Schema&#125; = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> PermissionSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  name:<span class="built_in">String</span>,</span><br><span class="line">  type:<span class="built_in">String</span>,</span><br><span class="line">  text:<span class="built_in">String</span>,</span><br><span class="line">  userRole:<span class="built_in">Array</span>,</span><br><span class="line">  parentRouterId:<span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> childRouteModel  = model(<span class="string">"children_routers"</span>,PermissionSchema);</span><br><span class="line"><span class="built_in">module</span>.exports = childRouteModel</span><br></pre></td></tr></table></figure></li><li><p>controllers模块下的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PermissionModel  = <span class="built_in">require</span>(<span class="string">'./../models/routers'</span>);</span><br><span class="line"><span class="keyword">const</span> PermissionChildModel =                 <span class="built_in">require</span>(<span class="string">'./../models/children_routers'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionCtl</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> query (obj) &#123;  <span class="comment">// 用户权限查询接口</span></span><br><span class="line">    <span class="keyword">let</span> &#123; userRole &#125; = obj ;</span><br><span class="line">    <span class="keyword">if</span> (!userRole) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">code</span>:<span class="number">403</span>,<span class="attr">msg</span>:<span class="string">'用户权限丢失,请退出后重新登陆！'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> routersDoc = <span class="keyword">await</span> PermissionModel.find(&#123;<span class="attr">userRoles</span>:&#123;<span class="attr">$elemMatch</span>:&#123;<span class="attr">$eq</span>:userRole&#125;&#125;&#125;);</span><br><span class="line">    <span class="keyword">const</span> routersChildDoc = <span class="keyword">await</span> PermissionChildModel.find(&#123;<span class="attr">userRole</span>:&#123;<span class="attr">$elemMatch</span>:&#123;<span class="attr">$eq</span>:userRole&#125;&#125;&#125;);</span><br><span class="line">    routersDoc.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//console.log(typeof(element._id));</span></span><br><span class="line">      routersChildDoc.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//console.log(typeof(item.parentRouterId));</span></span><br><span class="line">        <span class="keyword">if</span> (item.parentRouterId==element._id.toString()) &#123;</span><br><span class="line">          element.children.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(routersDoc);</span><br><span class="line">    <span class="keyword">return</span> !routersDoc ? &#123;<span class="attr">code</span>:<span class="number">403</span> ,<span class="attr">msg</span> :<span class="string">'改用户没有任何权限'</span>&#125;:&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">routerList</span>:routersDoc,&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports =  <span class="keyword">new</span> PermissionCtl()</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://s1.ax1x.com/2020/11/09/B7ICDJ.png" alt></p></li><li><h4 id="代码不全请访问github-获取全部源码"><a href="#代码不全请访问github-获取全部源码" class="headerlink" title="代码不全请访问github 获取全部源码"></a>代码不全请访问github 获取全部源码</h4><p><a href="https://github.com/Yuhior/vue-koa-mongo" target="_blank" rel="noopener">Yuhior的GitHub地址欢迎点赞</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;人嘛总会有很多借口去拖延一件事，我发现这种人真的是无敌的用那个词怎么讲？哦对就是神烦。你看看我一天天的距离上次更新博客很长时间了吧？一直在忙忙周一到周五不是在上班就是在上班路上哈哈哈，反正就是没有一天在闲着，然后就是嘛…..,hahhahh 就拖着
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="路由权限" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>在一起观后感</title>
    <link href="http://yoursite.com/2020/11/03/yougan/"/>
    <id>http://yoursite.com/2020/11/03/yougan/</id>
    <published>2020-11-03T06:40:31.000Z</published>
    <updated>2020-11-03T06:54:16.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一段时间没有更新博客了，今天真的趁着昨天去写观后感，然后把字码一下，这次不记录技术记录一次观后感，因为上次做的demo一直在完善中，所以之后再进行相关的更新，一直想做一个成型的站点，算是自己摸索mongodb的第一次尝试吧，前后台自己做，前后台分离，毕竟学到就要用到，就是这么的有执行力，因为成果就是这么在一次一次的尝试中开花结果的，我相信坚持就有收获。</p></blockquote><h2 id="上天无亲，常与善人"><a href="#上天无亲，常与善人" class="headerlink" title="上天无亲，常与善人"></a>上天无亲，常与善人</h2><p>没想到自己会在曾经当作任务完成的事情，现在居然用下班时间来完成。可能这是被这部剧深深的感染了吧。初见这部剧还是在微博中刷到，看到了一个片段就被深深的吸引。于是用下班坐车时间和上个周日刷完了这部剧。初见它，就被它表达的责任感和痛苦感所俘虏。十个短小的单元剧，却演绎着十个不同的故事，但却表达了一个情感，国家兴亡，匹夫有责。</p><p>​    生命的拐点——人类不能让时间暂停，但人类可以创造拐点。</p><p>​    映入眼帘的是张嘉译路上骑车的镜头，本来在春节定好飞机票陪家人的他，被一个电话急召回医院，只后凭借自己多年的从医经验，在年轻院长还在抱有轻视的状态下，准确的判断出事态的严重性，和时间赛跑，这里我并不是在吹捧个人的英雄主义，只是他给我留下的印象最深，身患渐冻症的他，上楼梯的那一幕触碰到我内心的泪点。然后作为武汉最早接收新冠病毒感染着的定点医院，出现了一幕幕感人的镜头，有救治病人被感染的谭松林和刘芸，有一个个争分夺秒不顾辛劳的只睡几小时的医生护士，千万大众中最普通的人，同时也是最伟大的人。这所医院所有的医生护士在疫情汹涌而来的时刻，却站在了最前面。他们是最美的逆行者，可以说在疫情来到时，这里记录的并不是一座医院，一群人，而是一种精神，一座里程碑。</p><p>​    摆渡人——是烂掉的口罩还是穿在身上的垃圾袋呢？</p><p>​    从来没什么盖世英雄，有的只是不平凡的“摆渡人”，默默的付出，这一章节中表现出了太多的情感，雷佳音饰演的外卖小哥，就是所有“摆渡人”的缩影，从开始在医院给别人口罩，到接送医生护士回酒店，再到给小女孩送药送饭安慰小女孩，最后到为妻子的安全不接触妻子。无不体现着一个平凡人的不平凡。一句只要“只要您点就一直送”，就是喂到了所有人心里的一颗定心丸。印象最深的还是第一次接护士回家的那个桥段，说实话当在看到中途因为内心的恐惧而中间想撤出战斗的护士时，我内心也产生了一样的情感，有些鄙视这个护士，但是随后的一系列对话“我们保护病人，那谁来保护我们呢？是烂掉的口罩还是穿在身上的垃圾袋呢？我就是想活着，我有错么？”直击我心，是啊！我有什么资格去评判人家呢？反应真实又透露着残酷，这时不也不得不佩服广电这么大尺度的表现现实的残酷。害怕并不是贬义词，生而为人肯定会产生恐惧，果然后来继续战斗的她，更加彰显出心怀恐惧却必须迎难而上的的珍贵。寒风虽刺骨，但终于春暖花开的一天。</p><p>​    同行——同行又同行</p><p>​    两个本无所交集的医生和护士，在大年欢庆的时刻，毅然踏上了赴汉的路程，他们不是飞机接送，不是客车接送，一个不惧百里，一辆单车硬是骑出了一条宽广大路，女孩步行穿过大桥的场景很是震撼，无数人竖起了大拇指，为她加油。另一个火车转汽车再到步行，终于在一个义字当头的村庄碰到一起，同行又是同行，为双方鼓足了勇气，这个村庄下我看到了并不是人人畏惧病毒，他们所表现出来的义是小义也是大义。之后就是他们骑电车进入武汉城的那一刻，震惊了我，镜头下的武汉城是灰蒙蒙的，路上没有一个人，这一刻我感觉到的窒息，像是电影中表现的*城一样，真真切切的用一个镜头然后感受到什么叫做空城一般，也许这就是疫情下的残酷吧。两人各自奔赴战场，我去完成自己的使命，最终为完成对路途中遇见的小男孩的承诺，再次并肩作战，带去桃子核 的同时，为两位病人带来了坚持下去的勇气。义无反顾，同行向前。</p><p>​    搜索：24小时——防控防疫第二道战线</p><p>​    这个单元剧很特别取景并不在武汉，一个从小因为非典失去父母的小孩，长大后毅然做起了流调，主要是反映了在疫情期间流调时间紧任务重，迷雾重重的情况下查找病毒来源的故事，虽说剧情一直扑朔迷离，我们也能眼见的联防联控，但是可能真实的情况并没有表达出来，一直是两个流调员和一个片警在进行各处跑。但是还是给我们上了一课，可能平常的流调工作并不受人重视，但是在这种疫情之下的重要的性就体现出来了，追根溯源是必要且坚决的。还有就是这里边表现的老年人群体儿女终日忙碌疏于陪伴，导致后来的被骗，还是有值得深思的点的。再有就是希望我们不要像那个带着病毒还逃跑的人吧，有一点责任心也不会费那么大的人力物力去搞这个事了。</p><p>​    武汉人——搭把手就过了</p><p>​    首先先道一声武汉人向你们致敬，该单元包含的情节和内容非常密集，首先反应武汉基层初期防疫物资严重不足，基本上所有人员身着雨衣，用着厨房的橡胶手套，桶装水改造的防护面罩，但他们依然坚守在一线，他们就像一颗钉子一样死死的钉在那里，守护住了武汉，守护住了武汉人民，后期虽然资源得到了补充，但依旧消毒之后多次循环使用。即使这些条件仍旧不能阻挡他们防疫防控、送米送面、代买药品等等，平凡小事中流露着伟大。还表现了初期时间平凡人面对未知的病毒，他们内心真实的恐惧和担忧，男主发烧后在桥上那整段的剧情真的让人很揪心。还有婆媳两人从开始的关系不和到后来相互谦让住院到婆婆给儿媳带上玉镯，才体现人间真情的时刻。大难面前，他们不顾安危彰显出了常人最普通人的真情，才应该是一撇一捺的基本情感吧！反而这最平常最基本的人“情”才是整篇剧情的点睛之笔。</p><p>​    在一起没有提到的几个篇章，包含不远万里的“救护者”，最快速度的火神山，一方之舱的真情陪伴，赤子之心的我叫大连，生产口罩的抗疫事业，这些无一不包含着疫情之下的每一份努力。在我看来虽然只讲述了十个故事，但是却表达着中国各行各业在疫情下的奉献。我没有看过原型，但我通过它看到了你们的艰难，你们的付出，什么是真正的英雄，应该就是这些无私忘我，不辞艰辛的人们，他们的举动包罗万象，他们的选择铸就了他们的钢铁形象。你的美好生活，是有人替你负重前行，你们是最美的逆行者，在一起就能众志成城，就能战无不胜。上天无亲，常与善人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有一段时间没有更新博客了，今天真的趁着昨天去写观后感，然后把字码一下，这次不记录技术记录一次观后感，因为上次做的demo一直在完善中，所以之后再进行相关的更新，一直想做一个成型的站点，算是自己摸索mongodb的第一次尝试吧，前后台自己做，前后台分
      
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="看剧" scheme="http://yoursite.com/tags/%E7%9C%8B%E5%89%A7/"/>
    
      <category term="有感" scheme="http://yoursite.com/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>vue + koa2 + mongodb 前后端分离登陆demo</title>
    <link href="http://yoursite.com/2020/09/09/mongodb2/"/>
    <id>http://yoursite.com/2020/09/09/mongodb2/</id>
    <published>2020-09-09T03:25:17.000Z</published>
    <updated>2020-11-03T06:44:20.891Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世界上最遥远的距离就是从星期一到星期五，Oh，boss我太困了，我需要休息。boss：下次吧！根据墨菲定律，人们通常下次吧的意思就是星期八可以让你休息。当然啦这是不能的，我们的boss 可不是这样的人，老板会说没事困了就play ping-pang吧 ，哈哈哈所以有了公司的乒乓球台，我也是满脸问号？？？，至于为什么今天才来吐槽，是因为今天路过看见长久不用的乒乓球桌在那静静的静静地在那睡觉，睡的多么香啊，好想和它一起哈哈哈哈。有人肯定要问了一个学习的博客天天开场乱七八糟的东西，那我就不客气啦，博客技术肯定是很正经啊，但是写博客的人正不正经别人不知道哇哈哈哈，好了闲话少说，我们上一篇讲了mongodb的搭建，这一篇讲一下vue + koa2 + mongodb 的前后端小demo的实践吧</p></blockquote><ol><li><h4 id="前端登陆页面的搭建"><a href="#前端登陆页面的搭建" class="headerlink" title="前端登陆页面的搭建"></a>前端登陆页面的搭建</h4><p>vue脚手架不用多说了吧？直接来一个项目结构，写一个前端登陆页面 ，话不多说上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router 的index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/components/Login'</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/login"</span>,</span><br><span class="line">    name: <span class="string">"Login"</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/register"</span>,</span><br><span class="line">    name: <span class="string">"Register"</span>,</span><br><span class="line">    component: Register</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// Login.vue </span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; class=&quot;demo-ruleForm&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;login_form_input&quot; label=&quot;用户&quot; style=&quot;margin-top: 58px;&quot;&gt;</span><br><span class="line">    &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">      &lt;el-input v-model=&quot;ruleForm.username&quot; placeholder=&quot;请输入用户名或手机号&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;login_form_input&quot; label=&quot;密码&quot; style=&quot;margin-bottom:7px ;&quot;&gt;</span><br><span class="line">    &lt;el-form-item prop=&quot;userpass&quot;&gt;</span><br><span class="line">      &lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.userpass&quot; placeholder=&quot;请输入用户密码&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;login_btn&quot;&gt;</span><br><span class="line">    &lt;input class=&quot;login_submit&quot; type=&quot;button&quot; @click=&quot;submitForm(&apos;ruleForm&apos;)&quot; value=&quot;登录&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ruleForm: &#123;</span><br><span class="line">        username: &quot;&quot;,</span><br><span class="line">        userpass: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123; required: true, message: &quot;用户名或手机号&quot;, trigger: &quot;blur&quot; &#125;,</span><br><span class="line">        ],</span><br><span class="line">        userpass: [</span><br><span class="line">            &#123; required: true, message: &quot;请选择活动区域&quot;, trigger: &quot;change&quot; &#125;,</span><br><span class="line">            &#123; min: 6, max: 18, message: &quot;长度在 3 到 18 个字符&quot;, trigger: &quot;blur&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate(valid =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          // 点击登陆进行的提交 肯定会用axios  </span><br><span class="line">            this.$api.login(&#123;</span><br><span class="line">                username:this.ruleForm.username,</span><br><span class="line">                password:this.ruleForm.userpass</span><br><span class="line">            &#125;).then(res =&gt; &#123;</span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;).catch((err) =&gt; &#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&quot;error submit!!&quot;);</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><h4 id="axios的二次封装"><a href="#axios的二次封装" class="headerlink" title="axios的二次封装"></a>axios的二次封装</h4><p>上边提到了使用axios进行请求，我们平常都是直接在组件中直接用axios进行请求，这样造成当我们需要修改某一个接口的时候需要去组件里边找，下面我们就对axios进行封装 </p><ul><li><p>目录结构</p><p>-src</p><p>​    – http</p><p>​        –api.js</p><p>​        –config.js</p><p>​        –index.js</p><p>​        –insterface.js</p></li><li><p>config.js : axios配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    method:<span class="string">'post'</span>,</span><br><span class="line">    <span class="comment">//基础url前缀</span></span><br><span class="line">    baseURL:<span class="string">'/api'</span>,</span><br><span class="line">    <span class="comment">//请求信息头</span></span><br><span class="line">    headers:&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>:<span class="string">'application/json;charset=UTF-8'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    <span class="comment">//设置超时时间</span></span><br><span class="line">    timeout:<span class="number">10000</span>,</span><br><span class="line">    <span class="comment">// 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">    withCredentilas:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">    responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>api.js :具体封装 包含拦截、处理数据、返回服务器信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./config'</span>  <span class="comment">//倒入默认配置</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>  <span class="comment">//序列化请求数据，视服务端的要求</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./../router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">$axios</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">            baseURL: config.baseURL,</span><br><span class="line">            headers: &#123;&#125;,</span><br><span class="line">            transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data)</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//request 拦截器</span></span><br><span class="line">        instance.interceptors.request.use(</span><br><span class="line">            config =&gt; &#123;</span><br><span class="line">                <span class="comment">// Tip 1 ：请求开始的时候可以结合vuex开启全屏的loading动画</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Tip2 ：带上token ，可以结合vuex 或者重localStorage</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// if (store.getter.token) &#123;</span></span><br><span class="line">                <span class="comment">//     config.headers['X-Token'] = getToken() // 让每个请求携带token -- ['X-Token']为自定义key 请根据实际情况自行修改</span></span><br><span class="line">                <span class="comment">// &#125;else&#123;</span></span><br><span class="line">                <span class="comment">//     重定向到登陆页面</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="comment">// Tip3 ：根据请求方法，序列化传过来的参数，根据后端需求是否序列化</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (config.method.toLocaleLowerCase() === <span class="string">'post'</span> || config.method.toLocaleLowerCase() === <span class="string">'put'</span> || config.method.toLocaleLowerCase() === <span class="string">'delete'</span>) &#123;</span><br><span class="line">                    config.data = qs.stringify(config.data)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> config</span><br><span class="line">            &#125;,</span><br><span class="line">            error =&gt; &#123; <span class="comment">// 请求错误时做些事(接口错误、超时等)</span></span><br><span class="line">                <span class="comment">// Tip: 4 关闭loadding  </span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request:'</span>, error);</span><br><span class="line">                <span class="comment">//  1. 判断请求超时</span></span><br><span class="line">                <span class="keyword">if</span> (error.code === <span class="string">'ECONNABORTED'</span> &amp;&amp; error.message.indexOf(<span class="string">'timeout'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'根据你设置的timeout/真的请求超时 判断请求现在超时了，你可以在这里加入超时的处理方案'</span>)</span><br><span class="line">                    <span class="comment">// return service.request(originalRequest);//例如再重复请求一次</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 2. 需要重定向到错误页面</span></span><br><span class="line">                <span class="keyword">const</span> errorInfo = error.response;</span><br><span class="line">                <span class="built_in">console</span>.log(errorInfo);</span><br><span class="line">                <span class="keyword">if</span> (errorInfo) &#123;</span><br><span class="line">                    <span class="comment">// error =errorInfo.data//页面那边catch的时候就能拿到详细的错误信息,看最下边的Promise.reject</span></span><br><span class="line">                    <span class="keyword">const</span> errorStatus = errorInfo.status; <span class="comment">// 404 403 500 ... 等</span></span><br><span class="line">                    router.push(&#123;</span><br><span class="line">                        path: <span class="string">`/error/<span class="subst">$&#123;errorStatus&#125;</span>`</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);   <span class="comment">//在调用的那边可以拿到(catch)你想返回的错误信息</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// response 拦截器</span></span><br><span class="line"></span><br><span class="line">        instance.interceptors.response.use(</span><br><span class="line">            response =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> data;</span><br><span class="line">                <span class="comment">// IE9时response.data是undefined，因此需要使用response.request.responseText(Stringify后的字符串)</span></span><br><span class="line">                <span class="keyword">if</span> (response.data == <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    data = response.request.responseText</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    data = response.data</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 根据返回的code 值来做不同的处理 和后端进行约定</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (data.code) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">''</span>:</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果不是正确的返回code ，且已经登陆，那就抛出错误</span></span><br><span class="line">                <span class="comment">// const err = new Error(data.description)</span></span><br><span class="line">                <span class="comment">// err.data = data</span></span><br><span class="line">                <span class="comment">// err.response = response</span></span><br><span class="line">                <span class="comment">// throw err</span></span><br><span class="line">                <span class="keyword">return</span> data</span><br><span class="line">            &#125;,</span><br><span class="line">            error =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">                            error.message = <span class="string">'请求错误'</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                            error.message = <span class="string">'未授权，请登录'</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">                            error.message = <span class="string">'拒绝访问'</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                            error.message = <span class="string">`请求地址出错: <span class="subst">$&#123;error.response.config.url&#125;</span>`</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">                            error.message = <span class="string">'请求超时'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">                            error.message = <span class="string">'服务器内部错误'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">                            error.message = <span class="string">'服务未实现'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">                            error.message = <span class="string">'网关错误'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">                            error.message = <span class="string">'服务不可用'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">                            error.message = <span class="string">'网关超时'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">                            error.message = <span class="string">'HTTP版本不受支持'</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.error(error)</span><br><span class="line">                <span class="comment">// 此处我使用的是 element UI 的提示组件</span></span><br><span class="line">                Message.error(<span class="string">`ERROR: <span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error) <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//请求处理 执行 instance 的方法</span></span><br><span class="line">        instance(options)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>interface.js :接口统一管理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'./api'</span>  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 讲所有接口统一起来管理</span></span><br><span class="line"><span class="comment"> * 如果项目很大可以将url 独立成文件，接口分成不同的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">params</span> =&gt;</span>&#123;  <span class="comment">// 其中的一个接口</span></span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        url: <span class="string">'/mongotest'</span>,</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        params</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 注意post 请求啊，坑了我好久</span></span><br><span class="line"> <span class="comment">//const Register = params =&gt;&#123;</span></span><br><span class="line">   <span class="comment">// return axios(&#123;</span></span><br><span class="line">        <span class="comment">//url:'/users/register',</span></span><br><span class="line">        <span class="comment">//method:'POST',</span></span><br><span class="line">        <span class="comment">//data:params</span></span><br><span class="line">    <span class="comment">//&#125;)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    login</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>给Vue添加方法，然后进行挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apiList <span class="keyword">from</span> <span class="string">'./interface'</span>;</span><br><span class="line"><span class="keyword">const</span> install  = <span class="function"><span class="params">Vue</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (install.installed) <span class="keyword">return</span> ;</span><br><span class="line">    install.installed = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(Vue.prototype,&#123;</span><br><span class="line">        $api:&#123;</span><br><span class="line">            <span class="keyword">get</span>()&#123;</span><br><span class="line">                <span class="keyword">return</span> apiList</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install</span><br></pre></td></tr></table></figure></li><li><p>Main.js:进行使用挂在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'./http/index'</span></span><br><span class="line">Vue.use(api);</span><br></pre></td></tr></table></figure></li><li><p>组件中进行使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">this.$api.login(&#123;</span><br><span class="line">  username:this.ruleForm.username,</span><br><span class="line">  password:this.ruleForm.userpass</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="vue-本地调试跨域请求的代理"><a href="#vue-本地调试跨域请求的代理" class="headerlink" title="vue 本地调试跨域请求的代理"></a>vue 本地调试跨域请求的代理</h4><p>我服务端是localhost:3000，客户端是：localhost：3001 这样进行请求那肯定涉及到跨域问题啊，身为小白菜的我，在这卡了半天啊， 开始的时候我在koa使用 koa-cors 进行后台的跨域开放，很轻松的完成了，但是我轴啊，我就非要代理来进行，我要和你死磕到底哈哈哈哈，这是多大仇这是。在vue.config.js中进行proxy代理。这块我捣鼓了好一会。axiso封装的配置config.js ，baseURL:’/api’,就是这样 ，然后接口直接写成 url: ‘/mongotest’,对应好了跨域就不存在问题了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 本地运行地址</span></span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="comment">// 本地运行端口</span></span><br><span class="line">        port: <span class="string">'3001'</span>,</span><br><span class="line">        <span class="comment">// 代理配置</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="comment">// 匹配拦截路由  那就请求的接口是localhost:3000/api/XXX</span></span><br><span class="line">            <span class="string">'/api'</span>: &#123;   </span><br><span class="line">                target: <span class="string">'http://localhost:3000/'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                ws: <span class="literal">false</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="登陆数据token的"><a href="#登陆数据token的" class="headerlink" title="登陆数据token的"></a>登陆数据token的</h4><p>这一块真的是考虑良久或许我很菜吧，请大佬勿喷，但是绝对是很全面的，我自己肯定是很细节的走了一遍。</p><ul><li><p>先来讲前端登陆，前端登陆页面发送登陆请求，后台返回token </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$api.Login(&#123;</span><br><span class="line">  username:<span class="keyword">this</span>.ruleForm.username,</span><br><span class="line">  password:<span class="keyword">this</span>.ruleForm.userpass</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> loginType = <span class="string">''</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">if</span> (res.code===<span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">//登陆之后进行token的储存</span></span><br><span class="line">    <span class="comment">//localStorage.setItem('USER_TOKEN', JSON.stringify(res.token));</span></span><br><span class="line">    (res.token)&amp;&amp;(<span class="keyword">this</span>.$store.commit(<span class="string">'setUserToken'</span>,res.token)); </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 对登陆状态的cookie 存储</span></span><br><span class="line">    <span class="keyword">this</span>.$cookie.setCookie(&#123;<span class="attr">username</span>:res.username&#125;,<span class="number">2</span>/<span class="number">144</span>);</span><br><span class="line">    loginType =<span class="string">'success'</span> ;</span><br><span class="line">     </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    loginType =<span class="string">'error'</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>后台koa 进行接收，聊一下思路，请短发送请求，1.后台需要再路由处有接口，2.有了接口肯定会去对比用户名和密码对吧？不用别人点头那肯定的啊。3.进行mongo查询 4. 返回查询到信息生成token返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口处进行接收</span></span><br><span class="line">router.post(<span class="string">'/login'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//console.log(ctx.request.body);</span></span><br><span class="line">  <span class="keyword">let</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line">  <span class="keyword">if</span>(!username || !password) <span class="keyword">return</span> ctx.body = &#123;<span class="attr">code</span>: <span class="number">4020</span>,<span class="attr">msg</span>: <span class="string">'请填写用户名或密码'</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> args = &#123;username, password&#125;;</span><br><span class="line">  <span class="keyword">const</span> userData = <span class="keyword">await</span> getUsers.userLogin(args)</span><br><span class="line">  ctx.body = userData</span><br><span class="line">  <span class="built_in">console</span>.log(userData);</span><br><span class="line">  ctx.body = (userData.code === <span class="number">200</span>) </span><br><span class="line">     ? &#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">msg</span>: <span class="string">'登陆成功'</span>,<span class="attr">username</span>:userData.username, <span class="attr">token</span>: jwt._createToken(userData)&#125; </span><br><span class="line">     : userData</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对比密码你肯定不可能直接输入了就对比吧？那不得进行密码加密啊 我们使用bcrypt 进行密码加密</span></span><br><span class="line">usersSchema.methods = &#123;</span><br><span class="line">    comparePassword: <span class="function">(<span class="params">_pass, password</span>) =&gt;</span> &#123; <span class="comment">//验证方法</span></span><br><span class="line">        <span class="comment">// _pass传递过来的密码，password是数据库中的密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        bcrypt.compare(_pass, password, (err, isMath) =&gt; &#123; <span class="comment">//compare官方方法</span></span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        res(isMath); <span class="comment">// isMath返回true和false,true代表验证通过</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rej(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 进行调用密码加密的方法</span></span><br><span class="line"> <span class="keyword">let</span> result = <span class="keyword">await</span> usersDoc.comparePassword(password, usersDoc.password).then(<span class="function">(<span class="params">isMath</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (isMath) &#123; <span class="comment">// 返回true账户密码存在</span></span><br><span class="line">     <span class="keyword">return</span> isMath</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则是账户存在密码错误</span></span><br><span class="line">     <span class="built_in">console</span>.log(isMath, <span class="string">"密码不存在............"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"服务器出现异常，请重启服务器......"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line"><span class="keyword">return</span> !result ? &#123;<span class="attr">code</span>:<span class="number">-2</span> ,<span class="attr">msg</span> :<span class="string">'密码不正确'</span>&#125; : &#123;<span class="attr">code</span>:<span class="number">200</span>, <span class="attr">_id</span>: usersDoc._id,<span class="attr">username</span>: usersDoc.username,<span class="attr">avatar</span>: usersDoc.avatar, <span class="attr">mobile</span>: usersDoc.mobile,<span class="attr">email</span>: usersDoc.email&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行mongo 查询 使用mongoose ，我们新建一个db目录，需要 有对mongose 配置文件，数据的模型model文件，contoller文件，出口调用的index文件</span></span><br><span class="line"><span class="comment">// db 目录结构详细为：</span></span><br><span class="line"><span class="comment">//--index.js</span></span><br><span class="line"><span class="comment">//--db.js</span></span><br><span class="line"><span class="comment">//--models</span></span><br><span class="line"><span class="comment">//  --users.js</span></span><br><span class="line"><span class="comment">//--controllers</span></span><br><span class="line"><span class="comment">//    --user.js</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件 db.js</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="keyword">const</span> DB_URL = <span class="string">'mongodb://localhost:27017/msjx'</span></span><br><span class="line">mongoose.set(<span class="string">'useCreateIndex'</span>, <span class="literal">true</span>)</span><br><span class="line">mongoose.connect(DB_URL)</span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">'connected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'连接成功 '</span> + DB_URL);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链接异常error 数据库链接错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.connection.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Mongoose connection disconnected'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接断开disconnected 连接异常断开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.connection.on(<span class="string">'disconnected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'链接断开'</span>+ DB_URL)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型文件</span></span><br><span class="line"><span class="keyword">const</span> mongoose  =<span class="built_in">require</span>(<span class="string">'../db'</span>);</span><br><span class="line"><span class="keyword">const</span> bcrypt  = <span class="built_in">require</span>(<span class="string">"bcrypt"</span>)</span><br><span class="line"><span class="keyword">const</span> stringRandom = <span class="built_in">require</span>(<span class="string">'string-random'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; model ,Schema&#125; = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"> <span class="comment">// 定义加密密码计算强度</span></span><br><span class="line"><span class="keyword">const</span> SALT_WORK_FACTOR = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> usersSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    username:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:stringRandom(<span class="number">8</span>),</span><br><span class="line">        unique:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    alias_name:<span class="built_in">String</span>,</span><br><span class="line">    mobile: <span class="built_in">String</span>,</span><br><span class="line">    password: <span class="built_in">String</span>,</span><br><span class="line">    userType: <span class="built_in">Number</span>,  <span class="comment">// 用户角色</span></span><br><span class="line">    school_type:<span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    family_name: <span class="built_in">String</span>,</span><br><span class="line">    reg_time:&#123;</span><br><span class="line">        type:<span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="built_in">Date</span>.now</span><br><span class="line">    &#125;,</span><br><span class="line">    avatar:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 保存之前的操作 </span></span><br><span class="line">usersSchema.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 仅当密码被修改(或新)时才对其进行散列</span></span><br><span class="line">    <span class="keyword">if</span> (!user.isModified(<span class="string">'password'</span>)) <span class="keyword">return</span> next();</span><br><span class="line">    <span class="comment">// 进行加盐</span></span><br><span class="line">    bcrypt.genSalt(SALT_WORK_FACTOR, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">        <span class="comment">// 使用加盐密码之后的密码进行hash</span></span><br><span class="line">        bcrypt.hash(user.password, salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">            <span class="comment">// 用散列后的密码覆盖明文密码</span></span><br><span class="line">            user.password = hash;</span><br><span class="line">            next();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">usersSchema.methods = &#123;</span><br><span class="line">    comparePassword: <span class="function">(<span class="params">_pass, password</span>) =&gt;</span> &#123; <span class="comment">//验证方法</span></span><br><span class="line">        <span class="comment">// _pass传递过来的密码，password是数据库中的密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        bcrypt.compare(_pass, password, (err, isMath) =&gt; &#123; <span class="comment">//compare官方方法</span></span><br><span class="line">                <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                        res(isMath); <span class="comment">// isMath返回true和false,true代表验证通过</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rej(err);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> userModel  = model(<span class="string">"users"</span>,usersSchema);</span><br><span class="line"><span class="built_in">module</span>.exports = userModel</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// control 控制模型文件</span></span><br><span class="line"><span class="keyword">const</span> UsersModel  = <span class="built_in">require</span>(<span class="string">'./../models/users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersCtl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    query () &#123;  <span class="comment">// 用户列表查询接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            UsersModel.find(&#123;&#125;,(err,res)=&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(res)  <span class="comment">// res就是一个doc</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> userLogin(obj) &#123; <span class="comment">// 用户登陆的方法</span></span><br><span class="line">        <span class="keyword">let</span> &#123;username,password&#125;  = obj;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> usersDoc = <span class="keyword">await</span> UsersModel.findOne(&#123;<span class="string">"$or"</span> :  [ &#123;<span class="string">'mobile'</span>:username&#125; , &#123;<span class="string">'username'</span>:username&#125;]&#125;);</span><br><span class="line">        <span class="keyword">if</span> (!usersDoc) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               code:<span class="number">0</span>,</span><br><span class="line">               msg:<span class="string">"该用户尚未注册"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> usersDoc.comparePassword(password, usersDoc.password).then(<span class="function">(<span class="params">isMath</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isMath) &#123; <span class="comment">// 返回true账户密码存在</span></span><br><span class="line">                <span class="keyword">return</span> isMath</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则是账户存在密码错误</span></span><br><span class="line">                <span class="built_in">console</span>.log(isMath, <span class="string">"密码不存在............"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"服务器出现异常，请重启服务器......"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//console.log(result);</span></span><br><span class="line">        <span class="keyword">return</span> !result ? &#123;<span class="attr">code</span>:<span class="number">-2</span> ,<span class="attr">msg</span> :<span class="string">'密码不正确'</span>&#125; : &#123;<span class="attr">code</span>:<span class="number">200</span>, <span class="attr">_id</span>: usersDoc._id,<span class="attr">username</span>: usersDoc.username,<span class="attr">avatar</span>: usersDoc.avatar, <span class="attr">mobile</span>: usersDoc.mobile,<span class="attr">email</span>: usersDoc.email&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> userRegister(obj) &#123; <span class="comment">// 用户登陆的方法</span></span><br><span class="line">        <span class="keyword">let</span> &#123;alias_name,password,mobile,school_type&#125;  = obj;</span><br><span class="line">        <span class="keyword">const</span> usersDoc = <span class="keyword">await</span> UsersModel.findOne(&#123;mobile&#125;);</span><br><span class="line">        <span class="keyword">if</span> (usersDoc) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               code:<span class="number">0</span>,</span><br><span class="line">               msg:<span class="string">"该用户已经注册"</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> userRegister = <span class="keyword">new</span> UsersModel(&#123;alias_name,password,mobile,school_type&#125;);</span><br><span class="line">        <span class="keyword">let</span> userInfo = <span class="keyword">await</span> userRegister.save();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            code:<span class="number">200</span>,</span><br><span class="line">            msg:<span class="string">"注册成功"</span>            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    save(obj)&#123; </span><br><span class="line">        <span class="keyword">const</span> m = <span class="keyword">new</span> UsersModel(obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            m.save(<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(res)</span><br><span class="line">                <span class="comment">//console.log(res)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports =  <span class="keyword">new</span> UsersCtl()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index .js 文件</span></span><br><span class="line"><span class="keyword">const</span> UsersCtl  =<span class="built_in">require</span>(<span class="string">'./controllers/user'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getUsers: UsersCtl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="5"><li><p>生成token单独拿出来</p><p><img src="https://s1.ax1x.com/2020/09/24/wzi5qO.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createToken</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"><span class="keyword">const</span> _createToken = <span class="function">(<span class="params">userInfo</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jwt.sign(&#123;userInfo&#125;,<span class="string">'10000@qq.com'</span>,&#123;<span class="attr">expiresIn</span>:<span class="string">'60'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    _createToken</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// checkToken</span></span><br><span class="line"><span class="keyword">const</span> jwt =<span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"><span class="keyword">const</span> _checkToken = <span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>)</span>&#123; <span class="comment">// 获取请求头文件中的token信息</span></span><br><span class="line">    <span class="keyword">let</span> token = req.body.token || req.query.token || req.headers[<span class="string">'authorization'</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(token); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        <span class="comment">//确认token是否正确</span></span><br><span class="line">        <span class="keyword">let</span> decoded = jwt.decode(token,<span class="string">'10000@qq.com'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(decoded,<span class="number">4444</span>); <span class="comment">// 验证token是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (token &amp;&amp; decode.exp&lt;<span class="keyword">new</span> <span class="built_in">Date</span>()/<span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.json(&#123;<span class="attr">success</span>:<span class="literal">false</span>,<span class="attr">message</span>:<span class="string">'token令牌已过期'</span>&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  <span class="comment">// 如果没有token</span></span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">403</span>).send(&#123;</span><br><span class="line">            success:<span class="literal">false</span>,</span><br><span class="line">            message:<span class="string">'没有提供token！'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = _checkToken;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://github.com/Yuhior/vue-koa-mongo" target="_blank" rel="noopener">我的项目 github地址</a>  敬请关注</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;世界上最遥远的距离就是从星期一到星期五，Oh，boss我太困了，我需要休息。boss：下次吧！根据墨菲定律，人们通常下次吧的意思就是星期八可以让你休息。当然啦这是不能的，我们的boss 可不是这样的人，老板会说没事困了就play ping-pang
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>mongodb + node + vue 实现前后台分离</title>
    <link href="http://yoursite.com/2020/08/31/mongodb/"/>
    <id>http://yoursite.com/2020/08/31/mongodb/</id>
    <published>2020-08-31T01:35:00.000Z</published>
    <updated>2020-08-31T07:56:10.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>八月的前奏就是狮子座，那八月的尾巴还是处女座嘞，今天是八月的最后一天，决定在自己脑子清醒的时候，抓住八月的尾巴，抓紧时间写一篇经典有用瞎折腾的博客，最近可真的是太忙啦，从上篇文章的朋友结婚，到接老妈来京，再到青海之游，再到朋友周末来访，简直安排的满满。不过真的很充实。有的朋友就该问了，朋友结婚你瞎忙什么啊，哈哈哈哈哈别瞎想啊，俺可是伴郎团内的颜值担当呦。不像别人说就我怎么也能当伴郎？？？我也是满脸问号啦！还有出去游玩虽然感冒，虽然第一天天公不作美，虽然很冷，有那么虽然，但是我们很开心，终于没有留下遗憾。目前就是希望时间慢一些慢一些慢一些……好了废话不说了，最近偷功夫赶紧折腾一下吧。sql学习不知道成本有多大，但是还是不想走常规之路，我想搞一下mongodb，先牛刀小试一把，打算用mongodb+ node +vue 搞个登陆的小demo。来吧，展示！</p></blockquote><ul><li><h4 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h4><ol><li><p>手动mac安装mongodb </p><p>手动安装mongodb 去某度上一搜一大把，这个我不想多提，按照上边写的一步一步来就行了。</p></li><li><p>brew安装mongodb</p><p>用brew安装mongodb可是走了一个大坑</p><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>结果报错，找不到mongodb，网上需找原因，<code>MongoDB</code>不再开源，不能用上面的命令直接安装了，不过还是可以用<code>brew</code>安装的</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-community@4.4</span><br></pre></td></tr></table></figure><p>安装成功了，启动和停止服务</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew services start mongodb-community</span><br><span class="line">brew services stop mongodb-community</span><br></pre></td></tr></table></figure><p>配置文件路径：<code>/usr/local/etc/mongod.conf</code><br> log文件路径：<code>/usr/local/var/log/mongodb/mongo.log</code><br> data目录路径：<code>/data/db</code><br> bin目录路径：<code>/usr/local/Cellar/mongodb-community/4.2.6/bin</code></p></li><li><p>值得注意的是，使用<code>brew</code>安装MongoDB不需要添加<code>PATH</code>环境变量，通过<code>brew</code>安装的软件，默认安装在<code>/usr/local/Cellar/</code>目录下，执行<code>brew list</code> 可以查看所有通过<code>brew</code>安装的软件：</p></li></ul></li><li><p>设置账号和密码</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs   //查看所有数据库</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use admin  // 进入admin数据库，安装完mongodb初始有一个System和一个congfig数据库</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123; user: &quot;admin&quot;, pwd: &quot;password&quot;, roles: [&#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;] &#125;)</span><br><span class="line">// 创建管理员账户，mongodb中的用户是基于身份role的，该管理员账户的 role是 userAdminAnyDatabase。admin用户用于管理账号，不能进行关闭数据库等操作。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;user: &quot;root&quot;,pwd: &quot;password&quot;, roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br><span class="line">//创建完admin管理员，创建一个超级管理员root。角色：root。root角色用于关闭数据库。</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use yourdatabase  //进入你自己的数据库</span><br><span class="line">db.createUser(&#123;user: &quot;user&quot;,pwd: &quot;password&quot;,roles: [ &#123; role: &quot;dbOwner&quot;, db: &quot;yourdatabase&quot; &#125; ]&#125;)</span><br><span class="line">//role: &quot;dbOwner&quot;代表数据库所有者角色，拥有最高该数据库最高权限。比如新建索引等当账号管理员和超级管理员，可以为自己的数据库创建用户了。（坑）这时候一定，一定要切换到所在数据库上去创建用户，不然创建的用户还是属于admin。</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(&quot;admin&quot;,&quot;password&quot;)</span><br><span class="line">//删除单个用户</span><br><span class="line">db.system.users.remove(&#123;user:&quot;XXXXXX&quot;&#125;)</span><br><span class="line">//删除所有用户</span><br><span class="line">db.system.users.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>连接mongodb数据库</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo  // 坑坑坑 找了好久的网上说的命令，最后还是的自己看英文的文档，还是英文文档比较靠谱</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use xxx    数据名</span><br><span class="line">switched to db xxx </span><br><span class="line">&gt; db</span><br><span class="line">xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">// 可以看到并没有新建的数据库</span><br><span class="line">// 新建的数据库需要向新建的数据库中插入数据才能显示出来</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.xxx.insert(&#123;&quot;name&quot;:&quot;yuhior&quot;&#125;)   //</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可视化工具Robo T3  这个有点类似于mysql 的可视化工具navact，其实也没有什么就是可以看到数据</p><p><img src="https://s1.ax1x.com/2020/08/31/dOiWbF.png" alt></p></li></ol></li><li><h4 id="node连接mongodb"><a href="#node连接mongodb" class="headerlink" title="node连接mongodb"></a>node连接mongodb</h4><ol><li><p>安装node 吧我使用的koa2的脚手架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g koa-generator</span><br></pre></td></tr></table></figure></li><li><p>创建项目文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">koa2 --hbs koa2-zcls   // handlebars 模版</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>目录结构 自己增加一个db文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--bin</span><br><span class="line">--www</span><br><span class="line">--db</span><br><span class="line">--db.js</span><br><span class="line">--index.js</span><br><span class="line">--node_modules</span><br><span class="line">--public</span><br><span class="line">--images</span><br><span class="line">--javascripts</span><br><span class="line">--stylesheets</span><br><span class="line">--routes</span><br><span class="line">--index.js</span><br><span class="line">--users.js</span><br><span class="line">--views</span><br><span class="line">--error.hbs</span><br><span class="line">--index.hbs</span><br><span class="line">--layout.hbs</span><br><span class="line">--app.js</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure></li><li><p>使用mongoose进行数据库连接</p><p>安装mongoose库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save-dev</span><br></pre></td></tr></table></figure></li><li><p>db目录下db.js上代码 先导出mongoose扩展模块 ，该模块进行连接数据库 连接异常 断开连接等扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="keyword">const</span> DB_URL = <span class="string">'mongodb://localhost:27017/myBlog'</span></span><br><span class="line"></span><br><span class="line">mongoose.connect(DB_URL)</span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">'connected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Mongoose connection open to '</span> + DB_URL);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链接异常error 数据库链接错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">'erroe'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Mongoose connection disconnected'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接断开disconnected 连接异常断开</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mongoose.connection.on(<span class="string">'disconnected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose</span><br></pre></td></tr></table></figure></li><li><p>db的index.js ，定义查询和保存方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; model ,Schema&#125; = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//const Schema = mongoose.Schema;</span></span><br><span class="line"><span class="keyword">const</span> ceshiSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title: <span class="built_in">String</span>,</span><br><span class="line">    body:<span class="built_in">String</span>,</span><br><span class="line">    date:<span class="built_in">Date</span></span><br><span class="line">&#125;,&#123; <span class="attr">collection</span>: <span class="string">'ceshi'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> MyModel = mongoose.model(<span class="string">'ceshi'</span>, ceshiSchema);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mongodb</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    query () &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            MyModel.find(&#123;&#125;,(err,res)=&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    save(obj)&#123;</span><br><span class="line">        <span class="keyword">const</span> m = <span class="keyword">new</span> MyModel(obj)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            m.save(<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(res)</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Mongodb()</span><br></pre></td></tr></table></figure></li><li><p>routes/index.js中进行定义接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ModelDb  = <span class="built_in">require</span>(<span class="string">'./../db'</span>);</span><br><span class="line">outer.get(<span class="string">'/mongotest'</span>,<span class="keyword">async</span>(ctx,next)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> ModelDb.query()</span><br><span class="line">  ctx.body = data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/31/dODf58.png" alt></p></li></ol></li><li><h4 id="欲知后事如何且听先回分解-下一章应该会讲vue请求弄的接口，功力不够还需要来回折腾啊，和自己性格一样想走就走想做就做。"><a href="#欲知后事如何且听先回分解-下一章应该会讲vue请求弄的接口，功力不够还需要来回折腾啊，和自己性格一样想走就走想做就做。" class="headerlink" title="欲知后事如何且听先回分解 下一章应该会讲vue请求弄的接口，功力不够还需要来回折腾啊，和自己性格一样想走就走想做就做。"></a>欲知后事如何且听先回分解 下一章应该会讲vue请求弄的接口，功力不够还需要来回折腾啊，和自己性格一样想走就走想做就做。</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;八月的前奏就是狮子座，那八月的尾巴还是处女座嘞，今天是八月的最后一天，决定在自己脑子清醒的时候，抓住八月的尾巴，抓紧时间写一篇经典有用瞎折腾的博客，最近可真的是太忙啦，从上篇文章的朋友结婚，到接老妈来京，再到青海之游，再到朋友周末来访，简直安排的满
      
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程二之继承</title>
    <link href="http://yoursite.com/2020/08/07/inherited2/"/>
    <id>http://yoursite.com/2020/08/07/inherited2/</id>
    <published>2020-08-07T07:29:25.000Z</published>
    <updated>2020-08-13T06:41:22.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今日阳光明媚，今日多云转晴，我的心情从晴天一下子就多云啦，为什么呢这是，因为我找到我姥爷啦… 。鸭蛋不差钱上的经典语录，我还是以一个欢快的语句入场。在这两章一直在讲面向对象面向对象，也不知道面向了个啥，最后没有面着对象只能面着自己啦哈哈哈，虽然现实中没面成也可能你抓不住身边的目标，但是js里边的对象可是只要你想就可以抓的住的，这可是稳扎稳打这波绝对不亏的啊。穿过西风与山河，安知甜与乐。毕竟这是学习的天地，这里只有未来的梦想和你想成为的那个人，还有诗和远方。今天我们就来讲讲面向对象中的继承吧，也不知道js为什么要从对象中继承，不是应该从老爹继承嘛，哈哈哈，管它呢先码了再说，还是那句话，本人菜鸟望大佬们轻喷。</p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>   大家应该都知道OO语言中的最为人津津乐道的东西就是继承了吧，不服来辩哈哈哈，那么今天就来看看js是怎么实现继承的呢？</p><ol><li><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><ul><li><p>原型链</p><p>  简单回顾一下构造函数、原型、实例的关系：每一个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。如果让原型对象等于另一个类型的实例，那此时原型对象将包含一个指向另一个原型的指针，相应的另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例呢，那么上述关系依然成立。那这就好玩了呀，就像你让你条蛇咬住另一条蛇的尾巴，下一条又咬住另一条的尾巴….,那这就成了啊，原型链。先看看代码和图吧，毕竟oppoR50000s 让你的思路更清晰 哈哈哈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subproperty  =<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承了SuperType</span></span><br><span class="line">SubType.prototype =  <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype .getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert (instance.getSuperValue()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/07/aWG21s.png" alt></p><p>要注意此时的instance.constructor 现在指向的是SuperType ，这是因为原来SubType.prototype中的constructor被重写了的缘故。</p><p>调用instance.getSuperValue()会经历三个搜索步骤：1）搜索实例;2)搜索SubType.prototype; 3)搜索SuperType.prototype,最后这一步菜找到该方法。就是一层一层往上找呗。</p></li><li><p>默认原型</p><p> 别忘了咱们所有的引用类型都继承了Object，在使用所有的引用类型时，不是一般都有什么tostring方法、valueOf方法，那它们哪里来的啊，不可能和孙悟空一样凭空一样吧？哦不，不是凭空是仙石孕育而生吧？？哈哈哈那是不存在的吧，他们都是通过继承而来，这个继承也是通过原型链实现的，所以记住所有函数的默认原型都是Object的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。这也是所有自定义类型都会继承tostring()、valueOf()的根本原因。</p><p><img src="https://s1.ax1x.com/2020/08/07/aWdi8S.png" alt></p></li><li><p>确定原型和实力的关系</p><p>如何确定原型和实例之间的关系，上边的原型链我们也看到了，多乱的关系啊，那不得有个方法能确定确定实例和原型的关系嘛</p><ul><li><p>instanceof 可以测试实例原型链中出现过的构造函数，结果就会返回true。由于原型链的关系，我们可以说instance是Object 、SuperType或者SubType中任何类型的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">//true</span></span><br><span class="line">alert(instance <span class="keyword">instanceof</span> SuperType); <span class="comment">// true</span></span><br><span class="line">alert(instance <span class="keyword">instanceof</span> SubType); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>isPrototypeOf()方法，同样的只要原型链中出现过的原型，都可以说是该原型链所派生的实例的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line">alert(SuperType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line">alert(SubType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>谨慎定义方法</p><p>子类型有时候需要覆盖超类中的某个方法，或者需要添加超类型中不存在的方法。但不管怎么样，给原型添加方法的代码一定要放在替换原型的语句之后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.property =<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype =  <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 添加新的方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写超类型中的方法</span></span><br><span class="line">SubType.prototype.getSuperValue= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><em>注意问题：</em>在通过原型链实现继承的时候，不能使用对象自变量(重新写了)创建原型方法。因为这样就重写了原型链，此时原型链就会被切断，两个类之间也就没有什么关系了</p></li><li><p>原型链问题</p><ul><li><p>原型链虽然很强大，可以用来实现继承，但是也存在问题，不存在问题怎么会有更好的出现呢？是吧？最最主要的就是太能吃哈哈哈，开玩笑的啊 ，最主要的问题就是包含引用值的原型属性会被所有实例共享；原型链中一个原型变成另一个类型的实例，于是也就顺理成章的实现了现在的原型的属性啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">// red,blue,green, black</span></span><br><span class="line"><span class="keyword">var</span> instacne2 = <span class="keyword">new</span> Subtype();</span><br><span class="line">alert(instance2.colors); <span class="comment">// red,blue,green, black</span></span><br></pre></td></tr></table></figure></li><li><p>创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上应该说没有办法在不影响所有对象实例的情况下，给超类传递参数。</p></li></ul></li></ul></li><li><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><ul><li><p>这种技术的主要思想非常简单，就是在子类型构造函数的内部调用超类型构造函数。函数只不过是再特定环境中执行代码的对象，因此通过使用apply()和call()方法也可以在(将来)新创建的对象上执行构造函数,代码借调了超类型的构造函数，通过call（）方法（或apply（）方法也可以）实际就是在新创建的SubType的实例环境中调用了SuperType构造函数。这样在新的SubType对象上执行SuperType（）函数中定义的所有对象初始化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.colors= [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">// red,blue,green, black</span></span><br><span class="line"><span class="keyword">var</span> instacne2 = <span class="keyword">new</span> Subtype();</span><br><span class="line">alert(instance2.colors); <span class="comment">// red,blue,green</span></span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><p>相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 继承了SuperType，同时还传递了参数</span></span><br><span class="line">  SuperType.call(<span class="keyword">this</span>,<span class="string">"Nicholas"</span>);</span><br><span class="line">  <span class="comment">//实例属性</span></span><br><span class="line">  <span class="keyword">this</span>.age =<span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.name);  <span class="comment">// "Nicholas"</span></span><br><span class="line">alert(instance.age);    <span class="comment">// 29</span></span><br></pre></td></tr></table></figure></li><li><p>该模式存在的问题</p><p>该模式存在的问题其实和构造函数存在的问题一样，方法都是在构造函数中定义，因此函数复用就无从谈起来，因为在每次进行new 实例的时候 就相当于拷贝了一份构造函数的方法，方法多了那内存也就相当大了。</p></li></ul></li><li><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><ul><li><p>它来了它来了，它带着绝招走来了，组合继承是当前最常用的继承方式，指的就是将原型链和借用构造函数的技术组合到一起。思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样既通过在原型上定义方法实现了函数复用，又能保证每个实例都有自己的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors= [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.protptype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 继承属性</span></span><br><span class="line">  SuperType.call(<span class="keyword">this</span>,name);</span><br><span class="line">  <span class="keyword">this</span>.age =age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.constructor =SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>,<span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">// red,blue,green, black</span></span><br><span class="line">instance1.sayName();  <span class="comment">//Nicholas</span></span><br><span class="line">instance1.sayAge();  <span class="comment">// 29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>,<span class="number">27</span>);</span><br><span class="line">alert(instance2.colors);<span class="comment">// red,blue,green</span></span><br><span class="line">instance2.sayName(); <span class="comment">//Greg</span></span><br><span class="line">instance2.sayAge();  <span class="comment">//27</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><ul><li><p>用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意添加属性的实例或对象。object.create()就是这个原理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">"Nicholas"</span>,</span><br><span class="line">    friends:[<span class="string">"Shelby"</span>,<span class="string">"Court"</span>,<span class="string">"Vant"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype=obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup1=object(person);</span><br></pre></td></tr></table></figure></li><li><p>优点：类似复制一个对象，用函数来包装。</p></li><li><p>缺点：1.所有实例都会继承原型上的属性。2.无法实现复用。(新实例的属性都是后面添加)</p></li></ul></li><li><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><ul><li><p>给原型式继承外面套个壳子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  F.prototype = obj; <span class="comment">// 继承了传入的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();  <span class="comment">// 返回函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup1=object(person);</span><br><span class="line"><span class="comment">// 以上是原型式继承，给原型式继承在涛哥壳子传递参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subobject</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sub = object(obj);</span><br><span class="line">  sub.sayHi= <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"hi"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> sub</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sup2 = subobject(person);</span><br></pre></td></tr></table></figure></li><li><p>优点： 没有创建自定义类型，因为只是套了个壳子返回对象，这个函数就顺理成章的创建了新的对象</p></li><li><p>缺点： 没用到原型，无法复用</p></li></ul></li><li><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><ul><li><p>前边说过组合继承是javascript中最常用的继承模式，不过它也有它的缺点的，毕竟嘛人无完人是吧？组合继承最大的问题就在于无论什么情况下，都会调用两次超类型的构造函数：依次是在创建子类型原型的时候，另一次是在子类型构造函数内,造成的结果就是有两组的name和colors属性一组是在实例上一组是在SubType的原型中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name =name;</span><br><span class="line">  <span class="keyword">this</span>.colors =[<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>]</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>,name); <span class="comment">// 第二次调用SuperType()</span></span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype =<span class="keyword">new</span> SuperType();<span class="comment">// 第一次调用</span></span><br><span class="line">SubType.protptype.construtor = SubType;</span><br><span class="line">SubType.protptype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/13/azy3gs.png" alt></p></li><li><p>寄生组合式继承那就来啦：通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。基本思路就是：不必为了指定子类型的的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已，本质上就是使用寄生式继承来继承超类型的原型，然后在将结果指定给子类型的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(superType.prototype); <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.constructor =subType; <span class="comment">// 增强对象</span></span><br><span class="line">  subType.prototype = prototype;  <span class="comment">// 指定对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数内部，第一步创建超类型原型的一个副本，第二步是为创建的副本添加constructor属性，从而弥补因重写原型而失去默认的construtor属性，最后一步，将创建的对象（副本），赋值给子类型的原型。</p></li></ul><blockquote><p>这周事情比较多，趁着等着后台做接口的功夫，赶紧把未完成的东西写完，接口大佬还在睡觉，咱也不敢打搅哈哈哈，认真且怂，终于搞定了js对象，虽然感觉很是晦涩难懂，但还是啃了这块难啃的骨头，之后的知识应该是顺风顺水了吧，想多了哈哈哈，一想到乱七八糟的知识点怎么会那么容易，反正不管怎么样，盘它就完了。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今日阳光明媚，今日多云转晴，我的心情从晴天一下子就多云啦，为什么呢这是，因为我找到我姥爷啦… 。鸭蛋不差钱上的经典语录，我还是以一个欢快的语句入场。在这两章一直在讲面向对象面向对象，也不知道面向了个啥，最后没有面着对象只能面着自己啦哈哈哈，虽然现实
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="面向对象基本" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC/"/>
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>面向对象编程一</title>
    <link href="http://yoursite.com/2020/07/21/inherited/"/>
    <id>http://yoursite.com/2020/07/21/inherited/</id>
    <published>2020-07-21T02:14:27.000Z</published>
    <updated>2020-07-22T09:11:45.664Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>早吃撑、午吃撑、晚吃撑天天就是吃啊造啊吃完吐泡泡啊，每天都吃，也不胖这找谁说理去啊，最近虽然吃的频率比较少，但是真心吃了好几家环境不错又好吃的地方，主要我自己找能实力不太允许，大佬就不一样喽，不出手则已，一出手就是吃撑，哈哈哈哈哈。最近反正就是木空抽空也得写东西，因为我感觉我的js真的超烂，对于原生理解真的很浅，所以感觉自己触碰到了核心，那就忍不住就想一直触碰核心的内容，需要赶紧消化理解，如果不能消化总感觉自己有什么事情没有完成，这种感觉可是很不好吃饭不香，睡觉不香，干啥啥不香，哈哈哈哈反正就掌握了就很香啊。</p></blockquote><h4 id="1-理解对象"><a href="#1-理解对象" class="headerlink" title="1. 理解对象"></a>1. 理解对象</h4><ul><li><p>构造函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"Nichplas"</span> ;</span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">person.job  = <span class="string">""</span>Software Engineer<span class="string">";</span></span><br><span class="line"><span class="string">person.sayName = function ()&#123;</span></span><br><span class="line"><span class="string">    alert(this.name);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>字变量语法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Nichplas"</span>,</span><br><span class="line">    age:<span class="number">29</span>,</span><br><span class="line">    job:<span class="string">"Software Engineer"</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-属性类别"><a href="#2-属性类别" class="headerlink" title="2. 属性类别"></a>2. 属性类别</h4><ul><li><p>数据属性<br>数据属性包含了一个数据的值位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性</p><ul><li>[[ Configurable ]]:能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。</li><li>[[ Enumerable ]]:表示能否通过for-in 循环返回属性。</li><li>[[ Writable ]]:表示能都修改属性的值</li><li>[[ Value ]]:包含这个属性的数据值。读取属性值的时候，从这位置读；写入属性值的时候，把新值保存在这个位置。默认为undefined。<br>Object.defineProperty()接受三个参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.defineProperty(属性所在对象,属性名称,&#123;&#125;)</span></span><br><span class="line"><span class="comment">// 后边对象的属性一定是configurable、enumerable、writable、value设置其中一个或者多个的值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.definePeoperty(person,<span class="string">"name"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span>,</span><br><span class="line">    value:<span class="string">"Nicholas"</span></span><br><span class="line">&#125;);</span><br><span class="line">alert(person.name); <span class="comment">// Nicholas</span></span><br><span class="line">person.name = <span class="string">"lihua"</span>;</span><br><span class="line">alert(person.name); <span class="comment">// Nicholas</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问器属性<br>访问其属性不包含属性值；他们包含一个getter和setter函数(非必须)<em>Vue的数据响应式其中就是使用了getter和setter函数</em>，在读取访问器属性时，会调用getter函数返回有效的值；在写入访问器属性时，会调用setter函数并传入新值</p><ul><li>[[ Configurable ]]:同数据属性的Configurable</li><li>[[ Enumberable ]]:同数据属性的Enumberable</li><li>[[ Get ]]:在读去属性时调用的函数。默认值为undfined.</li><li>[[ Set ]]:在写入属性时调用的函数<br>Object.defineProperty()定义访问器属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    _year :<span class="number">2020</span>,</span><br><span class="line">    edition:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book,<span class="string">"year"</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>:function()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(newValue)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newValue&gt;<span class="number">2020</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">            <span class="keyword">this</span>.edition + = newValue <span class="number">-2020</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">book.year =<span class="number">2022</span>; <span class="comment">//触发set方法</span></span><br><span class="line">alert(book.edition) <span class="comment">// 触发get方法  3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义多个属性<br>Object.defineProperties(),接受两个参数：第一个是添加和修改属性的对象，第二个是对象的属性与第一个对象中要添加或修改的属性一一对应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book,&#123;</span><br><span class="line">    _year:&#123;</span><br><span class="line">        writable:<span class="literal">true</span>,</span><br><span class="line">        value:<span class="number">2020</span></span><br><span class="line">    &#125;,</span><br><span class="line">    edition:&#123;</span><br><span class="line">        writable:<span class="literal">true</span>,</span><br><span class="line">        value:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    year:&#123;</span><br><span class="line">        <span class="keyword">get</span>:function()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._year</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>:function()&#123;</span><br><span class="line">            <span class="keyword">if</span>(newValue&gt;<span class="number">2020</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>._year =newValue;</span><br><span class="line">                <span class="keyword">this</span>.edition+ =  newValue <span class="number">-2020</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>读取属性特性<br>Object.getOwnPropertyDescriptor(),接受两个参数:第一个是：属性所在的对象和要读取其描述符的名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book,<span class="string">"_year"</span>);</span><br><span class="line">alert(descriptor.value) ;  <span class="comment">// 2020</span></span><br><span class="line">alert(descriptor.configurable) ; <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-创建对象"><a href="#3-创建对象" class="headerlink" title="3. 创建对象"></a>3. 创建对象</h4><p>   使用字变量或者new对象的方式虽然都可以创建对象，但明显有缺点，使用同一个借口创建很多对象，会产生大量的重复的代码</p><ul><li><p>工厂模式：把实现同一件事情的相同代码放到同一个函数中，想实现这个功能只要执行这个函数即可，这就是工厂模式，也叫做“函数的封装”，这也是”低耦合，高内聚“，从而达到减少页面冗余码，提高代码重复利用率的作用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person =<span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">//创建一个新对象</span></span><br><span class="line">    <span class="comment">//原料</span></span><br><span class="line">    person.name = name;</span><br><span class="line">    person.age = age;</span><br><span class="line">    <span class="comment">//加工</span></span><br><span class="line">    person.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    person.showAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"年龄："</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出厂</span></span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">"张三"</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">"李四"</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">p1.showName();</span><br><span class="line">p2.showName();</span><br><span class="line"><span class="built_in">console</span>.log(p1.showName==p2.showName); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>缺点：一般我们创建对象是通过new来创建，比如new Date()，这里使用的是方法创建。（var p1=createPerson(“张三”,45)）使用new来创建可以简化一些代码，也带来一些新的特性。<br>每个对象都有一套自己的方法，浪费资源   console.log(p1.showName==p2.showName); false  说明两个方法不一样  ，因为创建function()的时候其本质是通过new Function()来创建的，会诞生一个新的函数对象，造成资源浪费。</p></li><li><p>构造函数模式：Array、Object、Function等这些都是内置类，所有的数组都是内置类Array的实例，所以的对象都是内置类Object的实例，所以函数都是Function的实例，而构造函数就是自定义一个类。</p><ul><li><p>构造函数写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span> (<span class="params">name,age</span>)</span>&#123;  <span class="comment">//首先构造函数 开头首字母大写</span></span><br><span class="line">    <span class="keyword">this</span>.name =name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+ <span class="keyword">this</span>.name);</span><br><span class="line">    &#125; ;</span><br><span class="line">    <span class="keyword">this</span>.showAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"姓名："</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不用返回对象啦！！！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> CreatePerson(<span class="string">"张三"</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> CreatePerson(<span class="string">"李四"</span>,<span class="number">20</span>);</span><br><span class="line">p1.showName();</span><br><span class="line">p2.showName();</span><br><span class="line"><span class="built_in">console</span>.log(p1.showName==p2.showName); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor == CreatePerson) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor == CreatePerson) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//1.我们看到这里使用了new方法来创建对象.</span></span><br><span class="line"><span class="comment">//2.但是console.log(p1.showName==p2.showName); //false 依旧是false  说明还是存在浪费资源的问题.</span></span><br></pre></td></tr></table></figure></li><li><p>将构造函数当作对象<br>构造函数和其他函数的唯一的区别，就在于调用它们的方式不同。不过构造函数毕竟也是函数，不存在定义构造函数的特殊语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">var</span> person =<span class="keyword">new</span> CreatePerson(<span class="string">"Nicholas"</span>,<span class="number">29</span>);</span><br><span class="line">person.showName();</span><br><span class="line"><span class="comment">// 作为普通函数</span></span><br><span class="line">CreatePerson(<span class="string">"Greg"</span>,<span class="number">27</span>);</span><br><span class="line"><span class="built_in">window</span>.showName();</span><br><span class="line"><span class="comment">// 在另一个对象的作用域中调用</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.call(o,<span class="string">"kasare"</span>,<span class="number">25</span>);</span><br><span class="line">o.showName();</span><br></pre></td></tr></table></figure></li><li><p>构造函数的问题<br>构造函数虽然很好用但是并不是没有缺点，使用构造函数主要问题就是每个方法都要在每个实例上重新创建一遍，上边的p1.showName和p2.showName不相等。创建两个完成同样任务的Function实例确实没有什么必要；况且有this对象在，根本不用在执行代码前就把函数对象绑定到特定对象上边</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age= age;</span><br><span class="line">    <span class="keyword">this</span>.showName = showName;</span><br><span class="line">&#125;</span><br><span class="line">funtion showName()&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样由于showName包含的是只想函数的指针，因此实例对象就共享了全局作用域中的同一个showName函数，但是存在一个新的问题，全局作用域的函数，却只能被某个对象调用，这在全局作用域下有点不太优雅，还有就是万一有很多的方法，那就需要在全局作用域下定义很多方法。所以就有更好的方法来啦</p></li></ul></li><li><p>原型模式<br> javascript规定每个函数都有一个prototype(原型属性)，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。也就是说prototype就是通过调用构造函数而创建的那个对象实例的原型对象。说了半天也没明白是啥 哈哈哈 看看代码吧</p><ul><li><p>弥补构造函数的缺点</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();  <span class="comment">// "Nicholas"</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName();  <span class="comment">// "Nicholas"</span></span><br><span class="line">alert(person1.sayName == person2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>理解原型对象</p><ol><li>只要创建了一个新的函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。所有的原型对象都会自动获得一个constructor(指向构造函数)的属性，就拿前边的栗子来说Person.prototype.constructor指向Person。<br>只要通过调用构造函数创建一个实例后，该实例的内部将包含一个指针(内部的属性)，指向构造函数的原型对象。这个指针叫[[ Prototype ]] (<strong>protp</strong>)。明确最重要的一点就是这个链接存在于实例和构造函数的原型对象之间。来看一个关系图<br><img src="https://s1.ax1x.com/2020/07/21/UoGoid.png" alt></li><li><p>isPrototypeOf():[[ Prototype ]]在现实中都无法访问到，但是通过isPrototypeof()来确定对象之间是否存在这种关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.isPrototypeof(person1);  <span class="comment">// true</span></span><br><span class="line">Person.prototype.isPrototypeof(person2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>getPrototypeOf():Object.getPrototypeOf()返回[[ Prototype ]]的值。</p></li><li>如何进行搜索某个属性:<br>首先:从实例本身开始，如果在实例中找到了具有给定名字的属性，则返回该属性的值；没有找到进行下一步<br>然后:继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这个属性，则返回属性的值。<br>当实例属性和原型对象的属性相同时，只会返回这个实例中的值</li><li><p>hasOwnProperty():用于检测一个属性是存在于实例中还是存在于原型中，只有在给定的属性存在于对象实例中时，才会返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)) <span class="comment">// false</span></span><br><span class="line">person1.name =<span class="string">"Greg"</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.name);</span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>原型与in操作符<br>由于hasOwnProperty(),只能确定在实例中存在的时候才返回true，但是在没有该属性或者在原型中存在的时候则否返回false，那么如何判定属性在原型中呢？in操作符理解你的困扰，in操作符号可以判断属性无论在实例中还是在原型中都返回true的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过定义这个函数就能判定属性存在与原型中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span> (<span class="params">object,name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !object.hasOwnProperty(name)&amp;&amp;(name <span class="keyword">in</span> object)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object.keys():该方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</span><br><span class="line">alert(keys);  <span class="comment">// "name,age,job,sayName"</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">"Rob"</span>;</span><br><span class="line">person1.age = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">var</span> p1keys =<span class="built_in">Object</span>.keys(person1);</span><br><span class="line">alert(p1keys);  <span class="comment">// "name,age"</span></span><br></pre></td></tr></table></figure></li><li><p>更简单的原型语法<br>大家可能注意到了，上边的栗子中，每添加一个属性就要敲一遍Person.prototype。那肯定有更简单的写法吧,但是可以观察到下边的写法，Person.prototype 等于一个新的对象。造成了constructor不再指向Person了，本质上相当于重写了默认的prototype对象,如果constructor很重要，那就手动设置一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Person.prototype =&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Person, // 手动设置一下</span><br><span class="line">    name:"Nicholas",</span><br><span class="line">    age:29,</span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原型的动态性<br>由于在原型中查找过程是一次一次的查找，因此我们在原型中修改的内容立马会在实例中体现出来–即使先创建了实例后修改了原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.sayHi=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"hi"</span>);</span><br><span class="line">&#125;</span><br><span class="line">friend.sayHi();  <span class="comment">// "hi" 不会报错</span></span><br></pre></td></tr></table></figure><p>尽管可以随时为原型添加属性和方法，但是重写原型对象就不同了，当我们调用构造该函数时会为实例添加一个最初原型的[[ Prototype ]]指针，如果完全修改了原型那就切断了两者的联系<br><img src="https://s1.ax1x.com/2020/07/22/U7WC5Q.png" alt></p></li><li>原生对象的原型<br>原生引用类型（Object、Array、String…）都在其构造函数的原型上定义了方法。比如Array.prototype中可以找到sort方法（我们现在所有直接调用的方法，其实都写在原型对象中）；</li><li>原型对象也有问题<br>可以翻一翻我们上边的构造函数，小船别翻啊哈哈哈，都可以在函数中进行参数的传递，但是原型对象中并不能进行参数的传递。第二个重大的问题是，原型中的属性被很多实例共享，这种共享对于函数非常合适，但是那些包含引用类型值的属性来说，问题就比较大了。下面的例子要是我想有个自己全部属性怎么办？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Person.prototype =&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Person, </span><br><span class="line">    name:"Nicholas",</span><br><span class="line">    age:29,</span><br><span class="line">    friends:["Shelby","Count"],</span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line">alert(person1.friends); <span class="comment">// "Shelby,Count,Van"</span></span><br><span class="line">alert(person2.friends); <span class="comment">// "Shelby,Count,Van"</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>组合使用构造函数模式和原型模式<br> 解决单独使用原型模式，而导致的共享的属性，不能拥有自己的实例属性副本</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age= age; <span class="comment">// 想要独有的属性都放在构造函数里边 </span></span><br><span class="line">    <span class="keyword">this</span>.showName = showName;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype =&#123;</span><br><span class="line">    <span class="keyword">constructor</span>:Person, </span><br><span class="line">    sayName:function()&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line">alert(person1.friends); <span class="comment">// "Shelby,Count,Van"</span></span><br><span class="line">alert(person2.friends); <span class="comment">// "Shelby,Count"</span></span><br></pre></td></tr></table></figure></li><li><p>动态原型模式<br> 动态原型模式致力于吧所有信息封装在构造函数里边，而通过构造函数中初始化原型，又保持了同时使用构造函数和原型的优点，换句话说就是，可以通过检查某个应该存在 的方法是否有效，来决定是否需要初始化原型。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age= age; </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName!=<span class="string">"function"</span>)&#123;</span><br><span class="line">      Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>寄生构造函数模式<br> 这种模式的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，这个函数又很像是典型的构造函数。下面是一个例子。除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line">friend.sayName();  <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><p> 这个模式可以在特殊的情况下用来为对象创建构造函数。假设我们想创建一个具有额外方法的特殊数组。由于不能直接修改Array构造函数，因此可以使用这个模式。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建数组</span></span><br><span class="line">    <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加值</span></span><br><span class="line">    values.push.apply(values, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">    values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组</span></span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</span><br><span class="line">alert(colors.toPipedString()); <span class="comment">//"red|blue|green"</span></span><br></pre></td></tr></table></figure></li><li><p>稳妥构造函数模式<br> 在了解稳妥构造函数模式之前，先了解下稳妥对象这个概念。稳妥对象指没有公共属性，而且其他方法也不引用this的对象。稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用this和new），或者防止数据被其他应用程序改动时使用。稳妥构造函数遵循与寄生构造函数类似的模式，但有亮点不同：一是新创建对象的实例方法不引用this;二是不使用new操作符调用构造函数。如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建要返回的对象</span></span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="comment">// 添加方法</span></span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = Persion(<span class="string">'bill'</span>, <span class="number">23</span>, <span class="string">'FE'</span>);</span><br><span class="line">p1.sayName() <span class="comment">// bill;</span></span><br></pre></td></tr></table></figure><p> 以上代码变量p1中保存的是一个稳妥对象，而除了调用sayName()外，没有别的方式可以访问其他数据成员。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;早吃撑、午吃撑、晚吃撑天天就是吃啊造啊吃完吐泡泡啊，每天都吃，也不胖这找谁说理去啊，最近虽然吃的频率比较少，但是真心吃了好几家环境不错又好吃的地方，主要我自己找能实力不太允许，大佬就不一样喽，不出手则已，一出手就是吃撑，哈哈哈哈哈。最近反正就是木空
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="面向对象基本" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC/"/>
    
      <category term="对象属性" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
    
      <category term="函数对象和普通对象" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="prototype" scheme="http://yoursite.com/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>实现数据响应式</title>
    <link href="http://yoursite.com/2020/07/18/Proxy/"/>
    <id>http://yoursite.com/2020/07/18/Proxy/</id>
    <published>2020-07-18T12:09:24.000Z</published>
    <updated>2020-07-20T07:30:32.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天是周末，难得的没有加班，没有出去浪，最近感觉很是无聊呀，可能我成了隔夜的杯中水吧，没有落灰，可能中了一种毒，这种毒里边还有一种蔬菜，那就是香菇呀，哈哈哈，猜到了吧，中了好菇毒，闲下来还是研究一下前端的知识吧，毕竟学海无涯，不进则退，再者也应该为了以后打算，毕竟还是要为了以后买各种东西，包括什么车啊房啊，毕竟凡人一个还是需要这些俗物的，哈哈哈，生活不止眼前的苟且，还有诗和远方。今天就看看Vue3到底是怎么实现数据响应的，数据变了然后视图也变了。</p></blockquote><ol><li><h4 id="Proxy数据代理和数据劫持"><a href="#Proxy数据代理和数据劫持" class="headerlink" title="Proxy数据代理和数据劫持"></a>Proxy数据代理和数据劫持</h4><p>Proxy 也就是代理，可以帮助我们完成很多事情，例如对数据的处理，对构造函数的处理，对数据的验证，说白了，就是在我们访问对象前添加了一层拦截，可以过滤很多操作，而这些过滤，由你来定义。具体参考用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> data = &#123;</span></span><br><span class="line"><span class="javascript">    name:<span class="string">"xiaohua"</span>,</span></span><br><span class="line">    age:25</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="comment">// 用法 const p = new Proxy(target, handler)  </span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//handler 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">set</span>(target,prop,newValue)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(targer,prop,newValue);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments); <span class="comment">// Reflect 就是和Proxy配合 ，set将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="keyword">get</span>(target,prop)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(target，prop,newValue);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments); <span class="comment">//获取对象身上某个属性的值，类似于 target[name]。</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  p.age = <span class="number">21</span>; <span class="comment">// 改变属性值，调用了Proxy的set方法 console 出的是object(data),age,21(新值)</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(p.name);  <span class="comment">// 调用了get ，console 出来的是21</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="实现数据渲染"><a href="#实现数据渲染" class="headerlink" title="实现数据渲染"></a>实现数据渲染</h4><p>想一下我们使用vue的时候，是不是数据data里边的变量，能使用 双花括号 写上变量的名称就可以渲染到浏览器上了呢，那么来看看到底是怎么实现的呢？那我们上边说的Proxy不可能随便说说的吧，怎么会呢？无事不登三宝殿，来吧用起来吧。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"myvue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> vue(&#123;   <span class="comment">// 自己写一个小的vue 吧。激动么？</span></span></span><br><span class="line"><span class="javascript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      name:<span class="string">"xiaohua"</span>,</span></span><br><span class="line"><span class="javascript">      message:<span class="string">"带着小明"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(option)&#123; <span class="comment">// 实例中的参数</span></span><br><span class="line">    <span class="keyword">this</span>.option = option;</span><br><span class="line">    <span class="keyword">this</span>._data = <span class="keyword">this</span>.option.data;</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="keyword">this</span>.option.el);</span><br><span class="line">    <span class="keyword">this</span>.compileNode(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line">  compileNode(el)&#123;  <span class="comment">// 进行渲染的函数来了啊</span></span><br><span class="line">    <span class="keyword">let</span> child = el.childeNodes;</span><br><span class="line">    <span class="built_in">console</span>.log(child);</span><br><span class="line">    childe.forEach(<span class="function">(<span class="params">node</span>)=&gt;</span>&#123;  <span class="comment">// 用[...child]可以保证是数组 </span></span><br><span class="line">      <span class="keyword">if</span>(node.nodeType===<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是文本的节点"</span>)；</span><br><span class="line">        <span class="keyword">let</span> text = node.textContent; <span class="comment">// 应该是一个&#123;&#123;name&#125;&#125;这样的东西</span></span><br><span class="line">        <span class="comment">//进行匹配</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;\s* ([^\s\&#123;\&#125;]+)  \s*\&#125;\&#125;/</span>;  <span class="comment">// 正则 [ ]表示取反，中间是 两端是&#123;&#123; 但是中间不能再是&#123;了 </span></span><br><span class="line">        <span class="keyword">if</span>(reg.test(text))&#123;</span><br><span class="line">          <span class="keyword">let</span> $<span class="number">1</span> = <span class="built_in">RegExp</span>.$<span class="number">1</span>; <span class="comment">//匹配的第一个元素 也就是name</span></span><br><span class="line">          <span class="comment">//if(this._data[$1]) 写成下边这样</span></span><br><span class="line">          <span class="keyword">this</span>._data[$<span class="number">1</span>]&amp;&amp;(node.textContent=text.repalce(reg,this_data[$<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeType===<span class="number">1</span>)&#123; <span class="comment">// 也就是节点元素 div或者其他</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"这是一个节点元素"</span>)；</span><br><span class="line">        <span class="keyword">this</span>.compileNode(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>我们渲染完数据了，那肯定想知道v-model这种双向数据绑定的了，不说下去我感觉自己都得好奇死，现在坐下来用小脑袋想一想，v-model 事件，1.要判定node上是不是有v-model属性，2.监听v-model的值的变化去改变data中的数据，3.监听一下(自定义一下这个事件)这个数据变化，再把这个渲染到页面有这个值的元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  &#123;&#123;test&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vm = <span class="keyword">new</span> vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">      test:<span class="string">"双绑定数据"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(vm)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(vm._data.name);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(option)&#123; </span><br><span class="line">    <span class="keyword">this</span>.option = option;</span><br><span class="line">    <span class="keyword">this</span>._data = <span class="keyword">this</span>.option.data;</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="keyword">this</span>.option.el);</span><br><span class="line">    <span class="keyword">this</span>.compileNode(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line">  compileNode(el)&#123;  </span><br><span class="line">    <span class="keyword">let</span> child = el.childeNodes;</span><br><span class="line">    <span class="built_in">console</span>.log(child);</span><br><span class="line">    childe.forEach(<span class="function">(<span class="params">node</span>)=&gt;</span>&#123; </span><br><span class="line">      <span class="keyword">if</span>(node.nodeType===<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> text = node.textContent; </span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;\s* ([^\s\&#123;\&#125;]+)  \s*\&#125;\&#125;/</span>; </span><br><span class="line">        <span class="keyword">if</span>(reg.test(text))&#123;</span><br><span class="line">          <span class="keyword">let</span> $<span class="number">1</span> = <span class="built_in">RegExp</span>.$<span class="number">1</span>; </span><br><span class="line">          <span class="keyword">this</span>._data[$<span class="number">1</span>]&amp;&amp;(node.textContent=text.repalce(reg,this_data[$<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeType===<span class="number">1</span>)&#123; </span><br><span class="line">        <span class="comment">// 1. 这是一个input 元素在这里完成第一步 </span></span><br><span class="line">        <span class="keyword">let</span> attr = node.attributes; <span class="comment">// 获取所有节点属性对象</span></span><br><span class="line">        <span class="keyword">if</span>(attr.hasOwnProperty(<span class="string">'v-model'</span>))&#123;<span class="comment">// 对象中是否含有属性为v-model的</span></span><br><span class="line">          <span class="keyword">let</span> keyName = attr[<span class="string">'v-model'</span>].nodeValue;</span><br><span class="line">          node.value = <span class="keyword">this</span>.data_[keyName];<span class="comment">//先把data中的数据放进input的value里边  属于渲染</span></span><br><span class="line">         <span class="comment">// 2.监听一下input值的变化，改变data的值</span></span><br><span class="line">          node.addEventListener(<span class="string">'input'</span>,e=&gt;&#123;</span><br><span class="line">            <span class="keyword">this</span>._data[keyName] = node.value; </span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.compileNode(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 怎么监听data数值中的变化呢？那是不想到上边的数据劫持，正戏来了,开始的proxy该用上了，劫持一下数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vue</span> <span class="keyword">extends</span> <span class="title">EventTarget</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(option)&#123; </span><br><span class="line">   <span class="keyword">super</span>();    <span class="comment">//进行继承</span></span><br><span class="line">    <span class="keyword">this</span>.option = option;</span><br><span class="line">    <span class="keyword">this</span>._data = <span class="keyword">this</span>.option.data;</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="keyword">this</span>.option.el);</span><br><span class="line">    <span class="keyword">this</span>.compileNode(<span class="keyword">this</span>.el);</span><br><span class="line">  &#125;</span><br><span class="line">  observe(data)&#123; </span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span> ;</span><br><span class="line">    <span class="keyword">this</span>._data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line">      <span class="keyword">set</span>(target,propertyKey,newValue)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(propertyKey); <span class="comment">// 对应data的test</span></span><br><span class="line">         <span class="keyword">let</span> event =  <span class="keyword">new</span> CustomEvent(propertyKey,&#123; <span class="comment">// 自定义一个事件，在渲染的时候触发这个函数</span></span><br><span class="line">           detail:newValue</span><br><span class="line">         &#125;);</span><br><span class="line">        _this.dispatchEvent(event); <span class="comment">// 触发事件 注意this的指向 ，然后将这事件绑定到渲染&#123;&#123;&#125;&#125;的值的时侯</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查漏补缺一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在学习一下自定义事件 ，要自定义事件必须继承一下自定义事件 EventTarget的方法   </span></span><br><span class="line"><span class="comment">//extends是继承   EventTarget 是将会创建一个新的EventTarget 对象实例。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个事件对象，名字为newEvent，类型为build </span></span><br><span class="line"><span class="keyword">var</span> newEvent = <span class="keyword">new</span> CustomEvent(<span class="string">'build'</span>, &#123; <span class="attr">bubbles</span>:<span class="literal">true</span>,<span class="attr">cancelable</span>:<span class="literal">true</span>,<span class="attr">composed</span>:<span class="literal">true</span> &#125;);</span><br><span class="line">       </span><br><span class="line"><span class="comment">//给这个事件对象创建一个属性并赋值，这里绑定的事件要和我们创建的事件类型相同，不然无法触发 </span></span><br><span class="line">newEvent.name = <span class="string">"新的事件！"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将自定义事件绑定在document对象上 </span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"build"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"你触发了使用CustomEvent创建的自定义事件！"</span> + newEvent.name);</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//触发自定义事件 ，也叫做发布吧</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(newEvent);</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vue</span> <span class="keyword">extends</span> <span class="title">EventTarget</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(option)&#123;  </span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.option=option;</span><br><span class="line">        <span class="keyword">this</span>._data = <span class="keyword">this</span>.option.data;</span><br><span class="line">        <span class="keyword">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="keyword">this</span>.option.el);</span><br><span class="line">        <span class="keyword">this</span>.observe(<span class="keyword">this</span>._data)</span><br><span class="line">        <span class="keyword">this</span>.compileNode(<span class="keyword">this</span>.el);</span><br><span class="line">    &#125;</span><br><span class="line">    observe(data)&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>._data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line">            <span class="keyword">set</span>(target,prop,newValue)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(prop);</span><br><span class="line">                <span class="keyword">let</span> event =  <span class="keyword">new</span> CustomEvent(prop,&#123;</span><br><span class="line">                    detail:newValue</span><br><span class="line">                &#125;);</span><br><span class="line">                _this.dispatchEvent(event);  </span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    compileNode(el)&#123;  </span><br><span class="line">        <span class="keyword">let</span> child =el.childNodes;</span><br><span class="line">        <span class="built_in">console</span>.log(child);</span><br><span class="line">        child.forEach(<span class="function"><span class="params">node</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>) &#123; </span><br><span class="line">                <span class="keyword">let</span> text = node.textContent;</span><br><span class="line">                <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\s\&#123;\&#125;]+)\s*\&#125;\&#125;/</span>;  </span><br><span class="line">                <span class="keyword">if</span> (reg.test(text)) &#123;</span><br><span class="line">                    <span class="keyword">let</span> $<span class="number">1</span> = <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">this</span>._data[$<span class="number">1</span>]&amp;&amp;(node.textContent = text.replace(reg,<span class="keyword">this</span>._data[$<span class="number">1</span>]));</span><br><span class="line">                    <span class="keyword">this</span>.addEventListener($<span class="number">1</span>,c=&gt;&#123;  <span class="comment">//将上边自定义的函数，绑定到上边</span></span><br><span class="line">                        node.textContent =  text.replace(reg,c.detail);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.nodeType===<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span>  attr  = node.attributes;</span><br><span class="line">                <span class="built_in">console</span>.log(attr);</span><br><span class="line">                <span class="keyword">if</span> (attr.hasOwnProperty(<span class="string">'v-model'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">let</span> keyName = attr[<span class="string">'v-model'</span>].nodeValue;</span><br><span class="line">                    node.value = <span class="keyword">this</span>._data[keyName];</span><br><span class="line">                    node.addEventListener(<span class="string">'input'</span>,e=&gt;&#123;</span><br><span class="line">                        <span class="keyword">this</span>._data[keyName] = node.value;  </span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="built_in">console</span>.log(keyName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.compileNode(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天是周末，难得的没有加班，没有出去浪，最近感觉很是无聊呀，可能我成了隔夜的杯中水吧，没有落灰，可能中了一种毒，这种毒里边还有一种蔬菜，那就是香菇呀，哈哈哈，猜到了吧，中了好菇毒，闲下来还是研究一下前端的知识吧，毕竟学海无涯，不进则退，再者也应该为
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
      <category term="数据响应式" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="vue双向数据流" scheme="http://yoursite.com/tags/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>截流和防抖</title>
    <link href="http://yoursite.com/2020/07/15/throttle/"/>
    <id>http://yoursite.com/2020/07/15/throttle/</id>
    <published>2020-07-15T03:41:31.000Z</published>
    <updated>2020-07-15T06:47:10.569Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近身体疲惫，每天感觉脑子跟不上，并且很容易犯困，还好有人一直给充电，本来不太精神但是瞬间就充满能量。经过一番思想斗争之后，终于决定昨天鸽了一下，哇，真的好爽，今天早上来了还被嘲讽提前过上了公园大爷的生活，哈哈哈，不过休班一时爽，一直休班一直爽啊 ，不不不，说错了，一直休班木有qian啊，最近怎么话这么多，步入正题吧，今天来研究一下截流和防抖原理。（接着奏乐，接着舞）</p></blockquote><ol><li><h3 id="什么情况出现的截流和防抖"><a href="#什么情况出现的截流和防抖" class="headerlink" title="什么情况出现的截流和防抖"></a>什么情况出现的截流和防抖</h3><ul><li>当我们在鼠标移动和页面滚动的时候频繁的触犯一个函数</li><li>当属一个输入框中，输入进行查询的时候</li><li>屏幕尺寸发生改变的时候（一直在缩小放大浏览器）</li></ul><p>以上情况都会高频的触发函数，这个时候浏览器就容易卡死，难道这样就放任不管么？兄弟你不是在开玩笑吧？怎么可能不管呢。这属于前端的性能优化之一啊。</p></li><li><h3 id="防抖原理和实现"><a href="#防抖原理和实现" class="headerlink" title="防抖原理和实现"></a>防抖原理和实现</h3><ul><li><p>原理：什么是防抖呢？顾名思义那就是防止抖动啊，在你一直抖啊抖的过程，不在你抖动的时候进行操作，而是再你稳定之后进行函数的执行，也就是说，当你频繁的进行一个动作（下拉滚动条），不会一直执行所触发的函数而是在停下来之后多长时间进行触发。再来举个栗子，哎！每天举栗子也很沉的好嘛，咱们那种大厦的感应的门了解吧？比如现在有10个人一直进门（好比你一直在滚动页面），这个感应门不可能进一个人关一次门吧？这样门早就被砸了好么（浏览器奔溃了），感应门肯定是等10个人进去了，等几（比如10秒）秒，这10秒内没有人进了，就执行关门这个操作（触发的函数），10内有人进，就重新再记10秒重新计算。这就是防抖</p></li><li><p>实现思路 ：主要有两点 1.事件发生后，清除旧的计时器  2.设置行的计时器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">handler,time</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = <span class="literal">null</span> ;         </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                clearTimeout(timer);    <span class="comment">// 触发就清0 触发就清0 ； 直到不触发之后，几秒钟 </span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                timer  = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 把box对象的这个this传给它</span></span></span><br><span class="line">                    handler.apply(_this,args);</span><br><span class="line">                &#125;,time);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 要执行的动作 </span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"这里做点什么"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.innerHTML = e.clientX;  </span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> testDebounce  = debounce(handle,<span class="number">2000</span>); </span></span><br><span class="line">  box.onmousemove = testDebounce;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我觉得你肯定你开始的时候一定和我一样，为什么debounce函数要return 一个函数，那我们来写一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">box.onmousemove = reTime();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reTime</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">  &#125;</span><br><span class="line">  timer  = setTimeout(handle,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// todo somethings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reTime函数需要操作来自父级作用域的变量timer，而debounce函数就是为了创建这样一个作用域，使得每次执行reTimer函数时timer变量都是存在的。但是后边这种相对于前边就不那么优雅了，第一个timer只在函数内部进行使用，不必在全局变量中，显然闭包更符合方案。</p></li></ul></li><li><h3 id="截流原理和实现"><a href="#截流原理和实现" class="headerlink" title="截流原理和实现"></a>截流原理和实现</h3><ul><li><p>原理：知道了防抖，截流就是更简单了，在一个瀑布中，定时抽断一下，俗话讲抽刀断水水更流，不形容我们做程序哈。再来举一个吧，光举着也没人吃。比如我们正在做一个输入框，要求每输入一个字符都调用一个API来查询数据，从而实现联想、自动补全等功能，然而我们的输入速度是很快的，可能还没等第一个字符的查询结果出来，第二个字符就已经敲进去了，所以我们需要让查询频率小一点，具体做法就是在输入的过程中，每隔N秒才查询一次。</p></li><li><p>实现思路 ：确保一个计时器停止时再重新计时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> timer = <span class="literal">null</span> ; </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">throttler</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (timer===<span class="literal">null</span>) &#123;  <span class="comment">// 只要时间不是null 就触发 。也就是说这个事件触发之后就从头算时间，到时间了也就再次触发</span></span></span><br><span class="line"><span class="javascript">                    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                        fn();</span><br><span class="line"><span class="javascript">                        timer = <span class="literal">null</span>;</span></span><br><span class="line">                    &#125;,delay)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'--todoSomethings---'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        box.onmousemove = throttle(handle,2000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近身体疲惫，每天感觉脑子跟不上，并且很容易犯困，还好有人一直给充电，本来不太精神但是瞬间就充满能量。经过一番思想斗争之后，终于决定昨天鸽了一下，哇，真的好爽，今天早上来了还被嘲讽提前过上了公园大爷的生活，哈哈哈，不过休班一时爽，一直休班一直爽啊 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="防抖" scheme="http://yoursite.com/tags/%E9%98%B2%E6%8A%96/"/>
    
      <category term="截流" scheme="http://yoursite.com/tags/%E6%88%AA%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>图片缩放及拖拽</title>
    <link href="http://yoursite.com/2020/07/08/darg/"/>
    <id>http://yoursite.com/2020/07/08/darg/</id>
    <published>2020-07-08T08:28:29.000Z</published>
    <updated>2020-07-08T09:34:06.681Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不知不觉又一个月过去，这段时间早上的看书也是颇有收获，真心推荐大家打好基础，在进行更深一步的学习，现在感觉自己从书籍中收获颇丰，打算在用一些天把这本书（js红皮书）看完，之后的心得体会一定和大家进行分享，当然如有不对之处还是请大佬们轻点开火。闲话咱也不多说，都在酒里，不不不，说错了，都在文章里。今天一改之前的学习风格，今天分享一下今天在工作中遇到的麻烦。</p></blockquote><ul><li><p>功能要求：进行图片的放大之后的滚轮缩放</p><ol><li><p>首先我先实现图片的放大吧</p><ul><li><p>使用了一个jquery的插件，baguetteBox.js这款插件还是不错的选择，符合正常的功能需求，强力推荐！！！</p></li><li><p>废话也不多说，毕竟一款插件看看就能上手，贴一下自己的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">baguetteBox.run(<span class="string">'.z3d_goods_img'</span>, &#123;  <span class="comment">// .z3d_goods_img  就是被放大的图片元素</span></span><br><span class="line">  captions: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>].alt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> oldIE === <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Object</span>.keys) &#123;</span><br><span class="line">  hljs.initHighlighting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>正题来了啊，实现滚轮缩放吧，鼠标滚轮缩放的方法都了解吧？什么不是很了解？一只脚送走，哈哈哈开玩笑应该送走我才对啊，来了滚轮滑动onmousewheel ，妥妥的了</p><ul><li><p>大佬们我还没说完，先别着急骂我，上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">image.onmousewheel=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> UpDown =  event.wheelDelta</span><br><span class="line">  <span class="comment">//大于0滚轮向上滚动,小于0滚轮向下滚动</span></span><br><span class="line">  <span class="keyword">if</span>(UpDown&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> maxScaleHeight = toPoint(<span class="keyword">this</span>.style.maxHeight);  <span class="comment">// 我是使用的是百分比，所以转了一下小数</span></span><br><span class="line">    <span class="keyword">var</span> maxScaleWidth = toPoint(<span class="keyword">this</span>.style.maxWidth) ;</span><br><span class="line">    <span class="keyword">this</span>.style.maxHeight = toPercent(maxScaleHeight<span class="number">-0.1</span>); <span class="comment">// 再转回百分比，感觉有点low ，请大佬给出方案</span></span><br><span class="line">    <span class="keyword">this</span>.style.maxWidth = toPercent(maxScaleWidth<span class="number">-0.1</span>);</span><br><span class="line">    <span class="keyword">var</span> scaleper = maxScaleWidth<span class="number">-0.1</span>;</span><br><span class="line">    <span class="keyword">this</span>.style.transform = <span class="string">'scale('</span>+ scaleper+<span class="string">')'</span>; <span class="comment">// 持续缩放，无限缩放，还被设计吐槽为啥能无限放大</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxScaleHeight = toPoint(<span class="keyword">this</span>.style.maxHeight);</span><br><span class="line">    <span class="keyword">var</span> maxScaleWidth = toPoint(<span class="keyword">this</span>.style.maxWidth) ;</span><br><span class="line">    <span class="keyword">this</span>.style.maxHeight = toPercent(maxScaleHeight+<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">this</span>.style.maxWidth = toPercent(maxScaleWidth+<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">var</span> scaleper = maxScaleWidth+<span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">this</span>.style.transform = <span class="string">'scale('</span>+ scaleper+<span class="string">')'</span>;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>上完代码，谷歌浏览器一测没毛病，360没毛病 ，香香的了兄弟们，火狐（浏览器）狗哥不同意了啊整一句：我就不缩放，没办法啊 ，改吧！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">image.addEventListener(<span class="string">'DOMMouseScroll'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> UpDown =  event.detail*<span class="number">40</span></span><br><span class="line">  <span class="comment">//大于0滚轮向上滚动,小于0滚轮向下滚动</span></span><br><span class="line">  <span class="keyword">if</span>(UpDown&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> maxScaleHeight = toPoint(<span class="keyword">this</span>.style.maxHeight);</span><br><span class="line">    <span class="keyword">var</span> maxScaleWidth = toPoint(<span class="keyword">this</span>.style.maxWidth) ;</span><br><span class="line">    <span class="keyword">this</span>.style.maxHeight = toPercent(maxScaleHeight+<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">this</span>.style.maxWidth = toPercent(maxScaleWidth+<span class="number">0.1</span>);</span><br><span class="line">    <span class="keyword">var</span> scaleper = maxScaleWidth+<span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">this</span>.style.transform = <span class="string">'scale('</span>+ scaleper+<span class="string">')'</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxScaleHeight = toPoint(<span class="keyword">this</span>.style.maxHeight);</span><br><span class="line">    <span class="keyword">var</span> maxScaleWidth = toPoint(<span class="keyword">this</span>.style.maxWidth) ;</span><br><span class="line">    <span class="keyword">this</span>.style.maxHeight = toPercent(maxScaleHeight<span class="number">-0.1</span>);</span><br><span class="line">    <span class="keyword">this</span>.style.maxWidth = toPercent(maxScaleWidth<span class="number">-0.1</span>);</span><br><span class="line">    <span class="keyword">var</span> scaleper = maxScaleWidth<span class="number">-0.1</span>;</span><br><span class="line">    <span class="keyword">this</span>.style.transform = <span class="string">'scale('</span>+ scaleper+<span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></li><li><p>这不能这两大段吧？，来吧！展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*1.先合并一下event.detail和detail吧</span></span><br><span class="line"><span class="comment">*2.兼容一下DOMMouseScroll和onmousewheel吧</span></span><br><span class="line"><span class="comment">*3. 写共同的方法吧</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> wheel = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> delta = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (!event) <span class="comment">/* For IE. */</span>  </span><br><span class="line">        event = <span class="built_in">window</span>.event;  </span><br><span class="line">    <span class="keyword">if</span> (event.wheelDelta) &#123; <span class="comment">/* IE/Opera. */</span>  </span><br><span class="line">        delta = event.wheelDelta / <span class="number">120</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.detail) &#123;  </span><br><span class="line">        delta = -event.detail / <span class="number">3</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (delta)  </span><br><span class="line">        handle(delta);   <span class="comment">// todo</span></span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault)  </span><br><span class="line">        event.preventDefault();  </span><br><span class="line">    event.returnValue = <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;  </span><br><span class="line">    <span class="comment">/** DOMMouseScroll is for mozilla. */</span>  </span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'DOMMouseScroll'</span>, wheel, <span class="literal">false</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** IE/Opera. */</span>  </span><br><span class="line">iamge.onmousewheel = wheel;</span><br><span class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">delta</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> random_num = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">50</span>);  </span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="comment">// todo something</span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">       <span class="comment">// todo something</span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>功能要求：进行图片的放大之后鼠标拖拽</p><ol><li><p>前边弄完第二天，经理过来说，大佬再来个拖拽被，我心中那个美啊（…..反话大集合来了），美滋滋，搞起来吧，那就这样吧，那就这样吧 再爱都曲终人散了。我再贴</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*1. 先来获取图片的左右位置吧，毕竟要拖肯定得移动元素啊，记得要给元素定位哦</span></span><br><span class="line"><span class="comment">*2. 来个对象记录一下开始的left top 和现在的left top吧</span></span><br><span class="line"><span class="comment">* 3. 鼠标按下和鼠标松开来记录位置吧</span></span><br><span class="line"><span class="comment">* 4. 那就开是移动吧</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (getCss(image, <span class="string">"left"</span>) !== <span class="string">"auto"</span>) &#123;</span><br><span class="line">   params.left = getCss(image, <span class="string">"left"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">if</span> (getCss(image, <span class="string">"top"</span>) !== <span class="string">"auto"</span>) &#123;</span><br><span class="line">  params.top = getCss(image, <span class="string">"top"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getCss = <span class="function"><span class="keyword">function</span>(<span class="params">o,key</span>)</span>&#123;  <span class="comment">// 获取元素样式 ，这个没毛病吧 很常见</span></span><br><span class="line">  <span class="keyword">return</span> o.currentStyle? o.currentStyle[key] : <span class="built_in">document</span>.defaultView.getComputedStyle(o,<span class="literal">false</span>)[key];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">  zoomVal:<span class="number">1</span>,</span><br><span class="line">  left: <span class="number">0</span>,</span><br><span class="line">  top: <span class="number">0</span>,</span><br><span class="line">  currentX: <span class="number">0</span>,</span><br><span class="line">  currentY: <span class="number">0</span>,</span><br><span class="line">  flag: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  <span class="comment">// 鼠标按下获取 当时的鼠标的相对位置吧</span></span><br><span class="line">  params.flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (!event) &#123;</span><br><span class="line">    event = <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="comment">//防止IE文字选中</span></span><br><span class="line">    bar.onselectstart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> e = event;</span><br><span class="line">  params.currentX = e.clientX;</span><br><span class="line">  params.currentY = e.clientY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">image.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  params.flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (getCss(<span class="keyword">this</span>, <span class="string">"left"</span>) !== <span class="string">"auto"</span>) &#123;  <span class="comment">// 获取图片的位置了吧</span></span><br><span class="line">    params.left = getCss(<span class="keyword">this</span>, <span class="string">"left"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getCss(<span class="keyword">this</span>, <span class="string">"top"</span>) !== <span class="string">"auto"</span>) &#123;</span><br><span class="line">    params.top = getCss(<span class="keyword">this</span>, <span class="string">"top"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  <span class="comment">// 鼠标开始移动了啊</span></span><br><span class="line">  <span class="keyword">if</span> (params.flag) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowX = e.clientX, nowY = e.clientY;  <span class="comment">// 现在鼠标的位置</span></span><br><span class="line">    <span class="keyword">var</span> disX = nowX - params.currentX, disY = nowY - params.currentY; <span class="comment">// 移动的距离</span></span><br><span class="line">    <span class="keyword">this</span>.style.left = <span class="built_in">parseInt</span>(params.left) + disX + <span class="string">"px"</span>;</span><br><span class="line">    <span class="keyword">this</span>.style.top = <span class="built_in">parseInt</span>(params.top) + disY + <span class="string">"px"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">"function"</span>) &#123;</span><br><span class="line">      callback((<span class="built_in">parseInt</span>(params.left) || <span class="number">0</span>) + disX, (<span class="built_in">parseInt</span>(params.top) || <span class="number">0</span>) + disY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现完毕，美滋滋！soeasy嘛，经理，我这个拖拽实现完了啊，上传，喝茶、葛优躺、抽根烟，回来了，经理：不能用这拖拽，写的什么玩意，我：小朋友你是不是有很多的❓❓❓，查看一番发现的 火狐这浏览是真的gou啊，拖拽居然是新开页面打开图片。整吧，这肯定得禁用默认事件啊，后来发现冒泡事件也得禁用，不知道什么鬼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">iamge.onmousedown =<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e = event ? event : <span class="built_in">window</span>.event;  <span class="comment">// 加上</span></span><br><span class="line">  <span class="keyword">if</span> (e.preventDefault) e.preventDefault();</span><br><span class="line">  <span class="keyword">else</span> e.returnvalue = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(e.stopPropagation)&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// todo之前那些</span></span><br><span class="line">&#125;</span><br><span class="line">image.onmouseup  =<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 加上</span></span><br><span class="line">  <span class="comment">// todo之前那些</span></span><br><span class="line">&#125;</span><br><span class="line">image.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 也加上吧</span></span><br><span class="line">  <span class="comment">// todo之前那些</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不知不觉又一个月过去，这段时间早上的看书也是颇有收获，真心推荐大家打好基础，在进行更深一步的学习，现在感觉自己从书籍中收获颇丰，打算在用一些天把这本书（js红皮书）看完，之后的心得体会一定和大家进行分享，当然如有不对之处还是请大佬们轻点开火。闲话咱
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="缩放" scheme="http://yoursite.com/tags/%E7%BC%A9%E6%94%BE/"/>
    
      <category term="拖拽" scheme="http://yoursite.com/tags/%E6%8B%96%E6%8B%BD/"/>
    
  </entry>
  
  <entry>
    <title>说说正则那些事2</title>
    <link href="http://yoursite.com/2020/06/01/RegExp2/"/>
    <id>http://yoursite.com/2020/06/01/RegExp2/</id>
    <published>2020-06-01T03:11:02.000Z</published>
    <updated>2020-07-20T02:06:36.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天是六一儿童节啊，首先先祝福一下六一的小朋友们，节日快乐哦，不包含那些很大了还装小朋友的人儿哦，哈哈哈，开玩笑啦，心态年轻你们永远年轻啊，节日快乐节日快乐。(要不是怕挨打谁祝你们啊，切我堂堂…,真的很怂的啊)，给大佬们递茶，大佬们永远年轻啊。言归正传，上篇我们讲述了正则表达式招式一招式二，那么今天我们就继续把招式三四都看了吧，说招式其实感觉有点不好，因为大圣老师说过高手过招拼的都是内功，算了毕竟咱是菜鸟。</p></blockquote><ul><li><h3 id="招式三：正则表达式括号的作用"><a href="#招式三：正则表达式括号的作用" class="headerlink" title="招式三：正则表达式括号的作用"></a>招式三：正则表达式括号的作用</h3><ol><li><p>分组和分支结构</p><ul><li><p>分组：比如我们要匹配连续的一个字符可以用/a+/，进行匹配，而要匹配连续出现的ab时那我们就要使用括号了，就需要使用/(ab)+/,其中括号这个时候就是作用于ab整个整体的</p></li><li><p>分支结构：前边我们也见过了分支结构中就用了括号（P1|P2）中，此处的括号的作用也是不言而喻的，提供了子表达式的所有可能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^I love (javascript|Regular Expression)$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">"I love javascript"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">"I love Regular Expression"</span>));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>捕获分组</p><ul><li><p>括号的另一个作用也就是进行数据提取啊，为了更好的进行替换操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/</span>;</span><br><span class="line"><span class="comment">// 可以修改成括号版的：</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br></pre></td></tr></table></figure><p>为什么用括号呢？那就来说说这么的好处的吧？，看下边的代码块返回的是一个数组，第一个元素就是返回整体匹配到的结果，然后就是各个分组（括号）匹配的内容，然后就是下标，最后是输出的文本，然后这样就可以很方便的提取数据了，并且使用构造函数的全局属性$1-$9来获取console.log(RegExp.$1); // “2020”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2020-06-01"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line"><span class="comment">//["2020-06-01", "2020", "06", "01", index: 0, input: "2020-06-01", groups: undefined]</span></span><br></pre></td></tr></table></figure></li><li><p>毋庸置疑获取到了肯定就是替换了啊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2020-06-01"</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">2</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">3</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 06/01/2020</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>反向引用</p><ul><li><p>大家肯定很疑惑什么是反向引用，咱们获取了这个正则匹配到的然后进行替换，这叫引用，然后我们获取到了这个匹配的东西，然后再拿过来在进行匹配这就叫反向引用，也是是获取捕获的内容然后引用。这样不好理解，咱还是直接上菜吧，翠花来上酸菜吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要写个正则，需要匹配2020-06-01 2020/06/01 和2020.06.01,怎么进行写</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;(-|\/|\.)\d&#123;2&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> string1 = <span class="string">"2020-06-01"</span>;</span><br><span class="line"><span class="keyword">var</span> string2 = <span class="string">"2020/06/01"</span>;</span><br><span class="line"><span class="keyword">var</span> string3 = <span class="string">"2020.06.01"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string1));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string2));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string3));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//==========停 这是一条正经的分割线 ，你有没有想过 "2020-06/01"这种形式也会匹配到呢？</span></span><br><span class="line"><span class="keyword">var</span> string4 = <span class="string">"2020-06/01"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string4));</span><br><span class="line"><span class="comment">//true  是的也会匹配到</span></span><br></pre></td></tr></table></figure></li><li><p>那怎么办？这个时候你肯定会在想要是前边匹配到啥后边也就匹配到啥就好了，可以！js这么强大怎么不会想你所想，反向引用来了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> string1 = <span class="string">"2020-06-01"</span>;</span><br><span class="line"><span class="keyword">var</span> string2 = <span class="string">"2020/06/01"</span>;</span><br><span class="line"><span class="keyword">var</span> string3 = <span class="string">"2020.06.01"</span>;</span><br><span class="line"><span class="keyword">var</span> string4 = <span class="string">"2020-06/01"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string1));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string2));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string3));</span><br><span class="line"><span class="built_in">console</span>.log(regex.test(string4));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//false  这不就已经实现了</span></span><br></pre></td></tr></table></figure></li><li><p>括号嵌套怎么办？？？？  记住一个括号一个组，$1就是最外边的，$2下一层，$3再下一层(开始我也懵逼树下懵逼果了啊)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"1231231233"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);  <span class="comment">//123  第一层</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">//1  // 第一个（/d）</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>)  <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">4</span>)  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p>\10 表示什么呢？  第十个分组？还是\1 和 0 呢？，显然是前者。</p></li></ul></li><li><p>非捕获分组</p><p>之前出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此称他们为捕获型分组。</p><p>如果只想要括号的最原始的特性，但不会进行引用不另作存储进行使用，那么可以使用非捕获型分组(?:p),再来看看一个栗子，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(?:ab)+/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"ababa abbb ababab"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line"><span class="comment">// ["abab", "ab", "ababab"]</span></span><br></pre></td></tr></table></figure></li><li><p>来几个栗子尝尝</p><ul><li><p>模拟字符串trim方法，去掉字符串的开头和结尾的空白符,两种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(trim(<span class="string">" foobar "</span>));</span><br><span class="line"><span class="comment">// foobar</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s*(.*?)\s*$/g</span>,<span class="string">"$1"</span>);   </span><br><span class="line">  <span class="comment">// 点 是任意字符,* 是取 0 至 无限长度,?是非贪婪模式</span></span><br><span class="line">  <span class="comment">// \s 代表空白符</span></span><br><span class="line">  <span class="comment">//.*?a 就是取前面任意长度的字符内，到底一个 a 出现，匹配如下容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(trim(<span class="string">" foobar "</span>));</span><br><span class="line"><span class="comment">// foobar</span></span><br></pre></td></tr></table></figure></li><li><p>将每个单词的字母大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleize</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.toLoewCase().replace(<span class="regexp">/?:^|\s\w/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.toUpperCase();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>驼峰化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[-_\s]+(.)?/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">match,c</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c ? c.toUpperCase() :<span class="string">""</span>;          </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(camelize(<span class="string">"-moz-transform"</span>))</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><h3 id="招式四：正则表达式回溯法原理"><a href="#招式四：正则表达式回溯法原理" class="headerlink" title="招式四：正则表达式回溯法原理"></a>招式四：正则表达式回溯法原理</h3><blockquote><p>一看回溯这个词就肯定觉着比较高大上，本身这个程序员就是爱装13哈哈哈，确实这个词出现次数很多，那么大家理解不理解呢？</p></blockquote></li></ul><ul><li><p>没有回溯的匹配</p><p>假设我们的正则是/ab{1,3}c/,其可视化形式是：</p><p><img src="https://s1.ax1x.com/2020/07/20/UfWDT1.jpg" alt></p><p>而当目标字符串是”abbbc”时，就没有所谓的”回溯”。其匹配过程是：</p><p><img src="https://s1.ax1x.com/2020/07/20/UfWyY6.jpg" alt></p><p>其中子表达式b{1,3}表示”b”字符连续出现1到3次。</p></li><li><p>有回溯的匹配</p><p>如果目标字符串是”abbc”,中间就有回溯</p><p><img src="https://s1.ax1x.com/2020/07/20/UfWsFx.jpg" alt></p><p>图中的第五步出现了红颜色的区域，表示匹配不成功，此时已经匹配到了2个字符的”b”,准备尝试去匹配第三个时，结果发现第三个不是要匹配的”b”,是”c”,那么也就说明b{1,3}已经匹配完毕，状态就应该回到原来之前的匹配到2个”b”字符的状态，也就是回到第四步的状态，然后再去匹配c这个时候就匹配成功了。上边的第六步也就是回溯。</p><p>再去举个栗子，这一天天的举这玩意真难啊</p><p>字符串是”abbbc”,匹配过程就是</p><p><img src="https://s1.ax1x.com/2020/07/20/UfW6fK.jpg" alt></p><p>其中的第七步和第十步就是回溯，第七步和第四步一样，此时都是b{1,3}匹配了两个b，而第十步与第三步一样，此时b{1,3}只匹配了一个”b”,这也是b{1,3}的最终匹配结果。</p></li><li><p>常见的回溯形式</p><p>回溯法简单来说就是：正因为有很多的可能，所以需要一个个进行尝试，直到到某一步时，整体匹配成功了，要么到最后都试完了发现后，发现整体匹配不成功，总之，万变不离一个字：试！试就完了，通俗的说就是我们常常说的笨方法，掰手指头哈哈哈哈，那么我门下边来看看正则表达式中，哪些地方会产生回溯呢？</p><ul><li><p>贪婪量词</p><p>{1,3}这种就是贪婪量词的典范，因为贪啊，不管多少都一直吃一直吃，尝试着按照顺序往下吃，只要有可能就一直尝试尝试，实在吃不下再吐出来，咦好恶心啊哈哈哈哈，所以贼贪婪，但是能吃下就吃。这就是贪婪量词，但是这个时候有一个特殊的地方，当多个贪婪量词在一起并且有冲突的时候怎么办？？那就符合社会法则了啊，先下手为强，后下手那就吃不到呗！机会总是留给有准备的人滴。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"12345"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line"><span class="comment">// ["12345", "123", "45", index: 0, input: "12345", groups: undefined]</span></span><br></pre></td></tr></table></figure><p>其中前边的/d{1,3}匹配到的是”123”,后边的/d{1,3}匹配到的事”45”.</p></li><li><p>惰性量词</p><p>咱们前边也说过，惰性量词就是在贪婪量词之后加个问号？，表示尽可能少的匹配，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"12345"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line"><span class="comment">// ["1234", "1", "234", index: 0, input: "12345", groups: undefined]</span></span><br></pre></td></tr></table></figure><p>其中\d{1,3}?只匹配到一个字符”1”，而后边的\d{1,3}匹配到了”234”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"12345"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br></pre></td></tr></table></figure><p>虽然惰性量词不贪，但是也会有回溯现象。</p><p><img src="https://s1.ax1x.com/2020/07/20/UfW0m9.jpg" alt></p><p>目标字符串”12345”,匹配过程是：</p><p><img src="https://s1.ax1x.com/2020/07/20/UfW2lD.jpg" alt></p><p>虽然不贪，但是为了整体进行能够匹配成功，只能给你多塞一点了，因此最后\d{1,3}?匹配的字符是”12”,是两个数字，而不是一个。</p></li><li><p>分支结构</p><p>我们知道分支也是惰性的，比如<code>/can|candy/</code>，去匹配字符串”candy”，得到的结果是”can”，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p><p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><p><img src="https://s1.ax1x.com/2020/07/20/UfWgSO.jpg" alt></p><p>目标字符串是”candy”，匹配过程：</p><p><img src="https://s1.ax1x.com/2020/07/20/UfWR6e.jpg" alt></p><p>上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的</p></li></ul></li><li><p>小结</p><p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p><ol><li>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。</li><li>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。</li><li>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。</li></ol></li></ul><ul><li><h3 id="招式五：未完待续。。。"><a href="#招式五：未完待续。。。" class="headerlink" title="招式五：未完待续。。。"></a>招式五：未完待续。。。</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天是六一儿童节啊，首先先祝福一下六一的小朋友们，节日快乐哦，不包含那些很大了还装小朋友的人儿哦，哈哈哈，开玩笑啦，心态年轻你们永远年轻啊，节日快乐节日快乐。(要不是怕挨打谁祝你们啊，切我堂堂…,真的很怂的啊)，给大佬们递茶，大佬们永远年轻啊。言归
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://yoursite.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>说说正则的那些事</title>
    <link href="http://yoursite.com/2020/05/22/RegExp/"/>
    <id>http://yoursite.com/2020/05/22/RegExp/</id>
    <published>2020-05-22T03:31:03.000Z</published>
    <updated>2020-07-20T03:39:30.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我胡汉三终于又又又回来了，哈哈哈哈……什么？你说我不着调？不可能的我堂堂Yuhior 怎么可能干不着调的事呢？回顾一下最近的生活和学习，越发觉得每天光用框架啊，什么Vue啊，什么React啊，当然这些我都不会啊，哈哈哈，学习这些感觉力不从心，决心重新学习js，打好自己的基础能力，深知自己这座小平房地基不稳，哪能期盼盖出高楼啊，那最后塌了，不得害死自己啊，所以最近在看书，看红宝书（超级推荐），今天看到正则表达式觉得自己原来哪会什么正则啊，都是临到用了去搜一搜，虽说造轮子和吹飞机有一定区别，但是自己还是应该去深入学习，毕竟自己的才是财富。废话不多说，来看看我对正则的理解，如有不到之处，求大佬们请勿嫌弃我这个小渣渣。开始吧</p></blockquote><ul><li><h3 id="招式一：元字符匹配"><a href="#招式一：元字符匹配" class="headerlink" title="招式一：元字符匹配"></a>招式一：元字符匹配</h3><p>正则表达式也就是匹配的模式，要么是要去匹配想要的字符，要么是匹配位置 ，但是有木有感觉元字符太多记不住？第一我们先知道匹配模式有3个标志 ：</p><p>g:表示全局模式，将被应用于所有的字符串。而非发现第一个匹配项时立即停止；</p><p>i:表示不区分大小写，即在确定匹配项时忽略模式与字符串的大小写；</p><p>m：表示多行模式，即在到达一行的文本末时，继续向下一行进行查找；</p><ol><li><p>有两种模糊匹配（如果精准匹配，没多大意义，那还不如用直接indexof）</p><ul><li><p>横向模糊（长度不固定） {2，5}</p><p>/ab{2，5}c/  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/ab&#123;2,5&#125;c/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex))</span><br><span class="line"><span class="comment">//  ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span></span><br></pre></td></tr></table></figure></li><li><p>纵向模糊（配到某个字符不确定是特定的字符）[abc]</p><p>/a[123]b/</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex  =  <span class="regexp">/a[bcd]b/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"abb acb adb afb agb"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line">[<span class="string">"abb"</span>, <span class="string">"acb"</span>, <span class="string">"adb"</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符组 （很想数组把？ 也就是 [ ] 中有一些字符 ）</p><ul><li><p>范围表示</p><p>[abc]很短还好说，但是要很长怎么办？不能一个个写把? 那范围表示法就来了</p><p>[123456abcdefgHIJKLMN]    =&gt; [1-6a-gH-N]    用 连字符 -来省略和简写</p><p>但是要匹配 “a” “-“  “z” 任意一个字符怎么办？  可以写成[-az]或者[az-]或者[a-z]</p></li><li><p>排除字符组</p><p>有一种情况就是纵向模糊匹配，某位字符可以是任何东西，但是就是不能是某个字符，也就是求反</p><p>[^abc]</p><p>当然后边的也有相应的范围表示表示法  [ ^abcdefghijkl]  =&gt;[ ^a-l]</p></li><li><p>常见的简写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\d =&gt;[<span class="number">0</span><span class="number">-9</span>]  表示一位数字  也就是digit</span><br><span class="line">\D =&gt;[^<span class="number">0</span><span class="number">-9</span>] 表示除数字外的任意字符</span><br><span class="line">\w =&gt;[<span class="number">0</span><span class="number">-9</span>a-zA-Z]  表示数字、大小写字母和下划线。word </span><br><span class="line">\W =&gt;[^<span class="number">0</span><span class="number">-9</span>a-zA-Z]  表示非单词字符</span><br><span class="line">\s =&gt;[\t\v\n\r\f] 表示空白符  记忆也就是 space</span><br><span class="line">\S =&gt;[^\t\v\n\r\f]  非空白符</span><br><span class="line">. 通配符  除换行符、回车符、行分隔符、段分隔符除外的所有</span><br><span class="line">匹配任意字符 [^]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>量词 {2，5}</p><ul><li><p>简写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;m,&#125; =&gt; 至少出现m次</span><br><span class="line">&#123;m&#125; =&gt; 表示出现m次</span><br><span class="line">? =&gt;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,表示出现或者不出现 。记忆： 有么？</span><br><span class="line">+ =&gt;&#123;<span class="number">1</span>,&#125; 表示出现至少一次 。 记忆：加号是追加的意思，得先有一个，然后才考虑从追加</span><br><span class="line">* =&gt;&#123;<span class="number">0</span>,&#125; 表示出现任意次，有可能不出现，记忆：看天上星星，黑天啊没有，可能是零星几颗，也可能是数不过来</span><br></pre></td></tr></table></figure></li><li><p>贪婪匹配和惰性匹配</p><p>贪婪匹配：他会尽可能多的匹配，反正在能力范围之内，越多越好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;/g</span>;   <span class="comment">// 表示数字连续出现2-5次</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">//["123", "1234", "12345", "12345"]</span></span><br></pre></td></tr></table></figure><p>惰性匹配：很懒啊 像我一样，能匹配到俩个就绝不多匹配，量词后面加个问号就能实现惰性匹配，记忆方法：问一问你知足了吗，你很贪婪吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123 1234 12345 123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">//["12", "12", "34", "12", "34", "12", "34", "56"]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>多选分支 （或者也可以叫 “或”  ）</p><p>多选模式：展现形式（p1 | p2 | p3 ),其中得p1,p2,p3都是子模式，表示其中任何之一都可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|nice/g</span>;</span><br><span class="line"><span class="keyword">var</span> string =<span class="string">"good idea, nice try."</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex));</span><br><span class="line"><span class="comment">//  ["good", "nice"]</span></span><br></pre></td></tr></table></figure><p>*<em>注意 当我们用 /good|goodbye/ ，去匹配“goodbye”时，结果只是good</em>，说明分支结构是惰性得，也就是前边的上了，后边就不会再去尝试了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|goodbye/g</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"goodbye"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// ["good"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/goodbye|good/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"goodbye"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">// ["goodbye"]</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="招式二：位置匹配攻略"><a href="#招式二：位置匹配攻略" class="headerlink" title="招式二：位置匹配攻略"></a>招式二：位置匹配攻略</h3><p>正则表达式也就是匹配的模式，要么是要去匹配想要的字符，要么是匹配位置，下面我们就来讲一讲位置匹配吧</p><ol><li><p>什么是位置</p><p><img src="https://s1.ax1x.com/2020/07/20/Ufff3T.jpg" alt="位置"></p><p>也就是两个相邻字符之间的位置，比如图中箭头中的位置</p></li><li><p>如何匹配位置</p><p>目前有6个锚字符</p><p>^   $  \b  \B  (?=p)  (?!p)</p><ul><li><p>^ 脱字符 匹配开头的位置，在多行匹配中匹配行开头 (单行匹配)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^/g</span>;</span><br><span class="line"><span class="keyword">var</span> string =<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">// #hello</span></span><br></pre></td></tr></table></figure></li><li><p>$ 美元符号 匹配结尾，在多行匹配中匹配行尾 (单行匹配)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/$/g</span>;</span><br><span class="line"><span class="keyword">var</span> string =<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(string.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">// hello#</span></span><br></pre></td></tr></table></figure></li><li><p>\b  是单词边界，具体就是\w 和\W 之间的位置，也包括\w 和^之间的位置，也包括\w和$之间的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS]Lesson_01.mp4"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">// [#JS#]#Lesson_01#.#mp4#</span></span><br></pre></td></tr></table></figure><p>稍微的解释一波，强调不是狡辩😂😂😂，第一个#是在”[“和”J”之间的位置，第二个也就是”S”和”]”之间  ….</p></li><li><p>\B  也就是\b的反义 ，那么这么讲也就好理解了 ，也就是\B是反义非单词边界。例如在字符串中所有的位置中，扣掉\b，剩下的都是\b的。 具体：/w与/w、\W与\W 、\W与$之间的位置，来个例子吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\B/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS]Lesson_01.mp4"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">// #[J#S]L#e#s#s#o#n#_#0#1.m#p#4</span></span><br></pre></td></tr></table></figure></li><li><p>(?=p) 其中p就是那个上边的子模式(或模式也就是随便一个)，即 p前边的位置。比如（?= t ),表示””字符前边的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=l)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS]Lesson_01.mp4"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//he#l#lo</span></span><br></pre></td></tr></table></figure></li><li><p>(?!p) 也就是（?=p)的反面意思</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?!p)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//#h#e#l#l#o#</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><ol start="3"><li><p>位置的特性</p><p>对于位置的理解，我们理解成空字符串。</p><p>比如”hello” 字符串等价于如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">"hello"</span> == <span class="string">""</span> + <span class="string">"h"</span> + <span class="string">""</span> + <span class="string">"e"</span> + <span class="string">""</span> + <span class="string">"l"</span> + <span class="string">""</span> + <span class="string">"l"</span> + <span class="string">""</span> + <span class="string">"o"</span> + <span class="string">""</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>还等价于 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">"hello"</span> == <span class="string">""</span> + <span class="string">""</span> + <span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>所以把 /^hello$/ 写成/^^hello$$$/,是没有问题的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^^hello$$$/</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(result));</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>应用分析</p><ul><li><p>写一个不匹配任何东西的正则</p><p>/.^/  : 要求只有一个字符（.代表任意字符），但该字符后边是开头</p></li><li><p>数字的千位分隔符表示法</p></li></ul><p>先在最后弄一个逗号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg =  <span class="regexp">/(?=\d&#123;3&#125;$)/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"12345678"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">","</span>));</span><br><span class="line"><span class="comment">// 12345,678</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>最后弄出所有逗号，也就是后边的3个数字一组，也就是\d{3}至少出现一次。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>; <span class="comment">//使用量词 +</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"12345678"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">","</span>));</span><br><span class="line"><span class="comment">//12,345,678</span></span><br></pre></td></tr></table></figure></code></pre><p>  但是一旦遇到3的倍数位，那就有问题啦首位肯定也会加一个逗号啦，那就不要匹配开头啦 。那就来一个（?!^）;</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>; <span class="comment">//使用量词 +</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"123456789"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result.replace(reg,<span class="string">","</span>));</span><br><span class="line"><span class="comment">//123,456,789</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><h3 id="招式三见下一篇吧"><a href="#招式三见下一篇吧" class="headerlink" title="招式三见下一篇吧"></a>招式三见下一篇吧</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我胡汉三终于又又又回来了，哈哈哈哈……什么？你说我不着调？不可能的我堂堂Yuhior 怎么可能干不着调的事呢？回顾一下最近的生活和学习，越发觉得每天光用框架啊，什么Vue啊，什么React啊，当然这些我都不会啊，哈哈哈，学习这些感觉力不从心，决心重
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="RegExp" scheme="http://yoursite.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>git小记</title>
    <link href="http://yoursite.com/2020/05/07/git/"/>
    <id>http://yoursite.com/2020/05/07/git/</id>
    <published>2020-05-07T08:21:39.000Z</published>
    <updated>2020-05-07T09:46:23.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近看了好多公众号的推送，基本都是给同行打气的，还有诉说当前互联网大环境的，疫情之下充满了挑战，很多的程序员都面临降薪被辞退的可能，但是挑战伴随着机遇，（是不是很官方哈哈哈哈），其实不管环境怎样，你改变不了环境只能改变自己，当然不是让你随波逐流，不要曲解我的意思哦，改变自己是硬道理，提升自己不管在什么样的环境下都会比较吃香，毕竟优胜略汰，有着它一定的法则，是金子总会发光的，是吧？老铁们。哈哈哈哈听懂的请扣1。</p></blockquote><ol><li><p>项目初始化</p><ul><li><p>先要有个项目库  github上创建一个</p><p>会有一个https连接产生 ，也就是项目库地址</p></li><li><p>连接项目库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init   // 项目初始化产生.git文件夹，如果是脚手架则省略这步</span><br><span class="line">git remote add origin &lt;刚才产生的https地址&gt;</span><br><span class="line">git remote -v     // 查询是否连接到项目库</span><br><span class="line">git add .     // 工作区中所有未跟踪或者修改的文件添加到暂存区</span><br><span class="line">git commit -m  "信息" // 提交了啊</span><br><span class="line">git push origin master   //上传本地当前分支代码到master分支</span><br></pre></td></tr></table></figure></li><li><p>输入用户名和密码，每次push都要输入是不是很麻烦？ 采用修改git配置文件的方法</p><p>在用户文件夹下找到 <code>.gitconfig</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = xxx</span><br><span class="line">    email = xxx@xxxxx.com</span><br></pre></td></tr></table></figure><p>后边追加一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">     helper=store</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>2. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近看了好多公众号的推送，基本都是给同行打气的，还有诉说当前互联网大环境的，疫情之下充满了挑战，很多的程序员都面临降薪被辞退的可能，但是挑战伴随着机遇，（是不是很官方哈哈哈哈），其实不管环境怎样，你改变不了环境只能改变自己，当然不是让你随波逐流，不
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git入门" scheme="http://yoursite.com/tags/git%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>浅拷贝和深拷贝</title>
    <link href="http://yoursite.com/2020/04/30/deep-copy/"/>
    <id>http://yoursite.com/2020/04/30/deep-copy/</id>
    <published>2020-04-30T08:53:10.000Z</published>
    <updated>2020-07-20T03:08:52.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/20/UfXSrq.jpg" alt="黑松、蓝天、白雪"></p><blockquote><p>上一篇文章还是沉浸再要过年的喜庆气氛当中，但怎么都没有想到疫情是如此的严重，还是希望各位珍爱生命远离病毒吧！，回顾一下过去的几个月，还好像再眼前，不禁感叹道时间过得实在太快，最近也在持续关注各大厂的招聘情况，感觉疫情之下，机会更少了，要求更多了，但是话又说回来，上天对每个人都是公平的，机会是对等的，只有不断地充实自己才是王道。所以我又来给各位灌毒鸡汤来了，干了这碗，咱们开始讲今天的主题，也就是我最近再啃得原生js。</p></blockquote><ol><li><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型分为两种，基本数据类型和引用数据类型，基本数据类型存储直接存储在栈内存中，而对于引用类型来说，它在栈内存中仅仅存了一个引用，而真正得数据存储在堆内存中。看一下示例图</p><p><img src="https://s1.ax1x.com/2020/07/20/UfOzMn.jpg" alt></p><p>引用类型就是存在堆内存中，两个对象是在用指针指向同一个堆内存得地址 </p><p><img src="https://s1.ax1x.com/2020/07/20/UfvBvj.jpg" alt></p></li></ol><ol start="2"><li><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>既然要说深拷贝，那估计大家都知道肯定有浅拷贝啊，那什么是浅拷贝呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型得的浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span> ; </span><br><span class="line"><span class="keyword">var</span> b = a ;</span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 5 </span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">// 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型的浅拷贝</span></span><br><span class="line"><span class="keyword">var</span>  obj = &#123;</span><br><span class="line">    name:<span class="string">'yuhior'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    class:'三年二班'</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj ;</span><br><span class="line">obj2.name = <span class="string">'张三了'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)  <span class="comment">// 张三了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name)  <span class="comment">// 张三了</span></span><br></pre></td></tr></table></figure><p>上边我们发现 基本类型由于存储在栈内存中，是两个相对独立的数据，所以更改一个另一个并不会改变，但是引用类型的obj 改变的name ，将 obj 赋予 obj2 的时候，我们其实仅仅只是将 obj 存储在栈堆中的的引用赋予了 obj2 ，而两个对象此时指向的是在堆内存中的同一个数据，所以当我们修改任意一个值的时候，修改的都是堆内存中的数据。我称 这种 = 只拷贝对象的引用，而不深层次的拷贝对象的值叫浅拷贝</p></li><li><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>在实际项目中，尤其是使用vue ，数据双向绑定的框架时，尤其明显的能感知到每个对象指向一个堆内存，一个改变另一些全部改变，根本不便于操作 。所以我们要深拷贝，我们要自由 哈哈哈哈哈。深拷贝就不会拷贝引用类型的引用，而是将引用类型的值全部拷贝一下，形成一个全新的堆内存存储。    </p></li><li><h3 id="深拷贝的实现方法"><a href="#深拷贝的实现方法" class="headerlink" title="深拷贝的实现方法"></a>深拷贝的实现方法</h3><ul><li><p>低配版 JSON.stringify()和JSON.parse() </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  obj = &#123;</span><br><span class="line">    name:<span class="string">'yuhior'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    class:'三年二班'</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">obj2.name = <span class="string">'张三了'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)  <span class="comment">// yuhior</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name)  <span class="comment">// 张三了</span></span><br></pre></td></tr></table></figure><p>缺点：不可以拷贝undefined 、function 、RegExp类型 的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line"><span class="comment">// 直接报错  </span></span><br><span class="line"><span class="comment">// VM4562:1 Uncaught SyntaxError: Unexpected token u in JSON at position 0</span></span><br><span class="line"><span class="comment">//     at JSON.parse (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">//    at &lt;anonymous&gt;:1:17</span></span><br></pre></td></tr></table></figure></li><li><p>Object.assign (target,source)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>缺点：可以看到对于一层对象来说是没有任何问题的，但是如果对象的属性对应的是其它的引用类型的话，还是只拷贝了引用，修改的话还是会有问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;    <span class="comment">// 来一个多层的</span></span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    b: <span class="number">11</span>,</span><br><span class="line">    c: [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line">obj2.c[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.c); <span class="comment">// ["a", 6, "c"]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.c); <span class="comment">// ["a", 6, "c"] </span></span><br><span class="line"><span class="comment">// 两个都改变了说明还是引用了</span></span><br></pre></td></tr></table></figure></li><li><p>递归拷贝 ，也是面试官常考的 ，我们还是先来举个栗子，毕竟学习了，还能吃栗子还是很爽的把 ，哈哈哈哈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  写一个深拷贝的方法把</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">depClone</span>(<span class="params">tar</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// tar如果是一个对象的话</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(tar)===<span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="comment">// typeof(Array) ==='object';  如果是一个数组</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(tar))&#123;</span><br><span class="line">            result = []; <span class="comment">// 将result 设定为数组 并执行遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> tar)&#123;</span><br><span class="line">                <span class="comment">//进行克隆数组中的每一项</span></span><br><span class="line">                result.push(deepClone(tar[i])); </span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//  如果是null的话，那就直接赋值null</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tar === <span class="literal">null</span>)&#123; </span><br><span class="line">            result = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 判断如果当前的值是一个RegExp对象的话，直接赋值</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tar.constructor===<span class="built_in">RegExp</span>)&#123;</span><br><span class="line">             result = tar;</span><br><span class="line">         <span class="comment">//最后就是普通的对象了，直接进行循环，递归赋值所有的值</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = &#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> tar)&#123;</span><br><span class="line">                result[i] = deepClone(tar[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 如果不是对象的话，那就是一个基本类型了，那就直接赋值被</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = tar ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 终于到回归结果的时候啦</span></span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锅都准备好啦，那就赶紧做个饭试一下把！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个对象 多层嵌套，还含有undefined  </span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">        b:<span class="regexp">/a/</span>,</span><br><span class="line">        c:<span class="literal">undefined</span>,</span><br><span class="line">        d:<span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,</span><br><span class="line">    c:[</span><br><span class="line">        &#123;</span><br><span class="line">            b:<span class="regexp">/a/</span>,</span><br><span class="line">            c:<span class="literal">undefined</span>,</span><br><span class="line">            d:<span class="literal">null</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'a'</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = deepClone(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);  <span class="comment">//  相信你勤快的小手，自己打印一下看看把</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/20/UfXSrq.jpg&quot; alt=&quot;黑松、蓝天、白雪&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上一篇文章还是沉浸再要过年的喜庆气氛当中，但怎么都没有想到疫情是如此的严重，还是希望各位珍爱生命
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="深拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>初识Linux之二</title>
    <link href="http://yoursite.com/2020/01/15/linux-publish2/"/>
    <id>http://yoursite.com/2020/01/15/linux-publish2/</id>
    <published>2020-01-15T09:20:15.000Z</published>
    <updated>2020-07-20T02:16:18.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年了，这是今年的第一篇，希望新的一年有新的开始，并希望你们像我一样越来越优秀哈哈哈，临近新年过年的气息也越来越浓郁，自己也期盼过年回家呀，临近年底项目还是无情的一如既往的压榨着我们，忙的手忙脚乱的（菜鸟专属毕竟大佬们可都是临危不乱的），某人鼓励我坚持写博客，我也重拾起写博客的习惯，坚持学习，坚持记录，毕竟这是一个记录成长的过程。2020少皱眉多微笑。</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/20/Uf4WXF.jpg" alt="GUOMAO Night"></p><p>上回书说道，张飞张翼德驾马来到曹操营前，大声骂道，曹操…..,停停停不好意思走错频道了，一看就不是个正经写记录的哈哈哈，上篇文章我们讲了Linux下的FTP安装配置还有Linux下安装node.js ，那今天我们就说Linux下使用Express搭建web服务把，如果你想用koa或者egg，不好意思哈，你问下度娘告不告诉你哈。开始吧。</p><ul><li><p>Linux下用Express搭建web服务器（其实和本地搭建没什么区别）</p><ol><li><p>先连接上我们的服务器把，启动xshell，输入用户名和密码连接上服务器。</p></li><li><p>cd到指定目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/</span><br></pre></td></tr></table></figure></li><li><p>创建web服务项目文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir demo</span><br></pre></td></tr></table></figure></li><li><p>进入项目目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd demo</span><br></pre></td></tr></table></figure></li><li><p>本地下的项目安装express模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i -g express express-generator</span><br><span class="line">express ***（项目名）--hbs （模板引擎）</span><br><span class="line">#cd 项目文件下</span><br><span class="line">#安装依赖</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></li><li><p>项目打包，将打包好的如vue的dist文件放进var/www/demo文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用FTP进行上传</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>你会发现你访问你的服务器ip加端口时会访问的到，但是关闭了，服务器这个也关闭了。下面将应对方法</p></li></ol></li><li><p>安装PM2托管Node Web服务程序</p><ol><li><p>安装pm2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nodejs/bin/pm2 /usr/local/bin/pm2</span><br></pre></td></tr></table></figure></li><li><p>启动托管命令，输入下面的命令启动托管任务，<code>abc</code>为托管项目定义的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --name abc</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年了，这是今年的第一篇，希望新的一年有新的开始，并希望你们像我一样越来越优秀哈哈哈，临近新年过年的气息也越来越浓郁，自己也期盼过年回家呀，临近年底项目还是无情的一如既往的压榨着我们，忙的手忙脚乱的（菜鸟专属毕竟大佬们可都是临危不乱的），某人
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="node项目部署" scheme="http://yoursite.com/tags/node%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>初识Linux之一</title>
    <link href="http://yoursite.com/2019/12/25/linux-publish/"/>
    <id>http://yoursite.com/2019/12/25/linux-publish/</id>
    <published>2019-12-25T07:49:50.000Z</published>
    <updated>2020-07-20T02:39:12.307Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/20/UfH40O.jpg" alt=" 2020第一场雪 "></p><blockquote><p>好久没有更新自己的博客了，也说明自己在这几个月的时间没有怎么学习，主要吧事情真的很多(强行狡辩)，不过虽然技术没有增长太多，但是还是有很多的收获的，今年好像对新年没有太多的概念，但是深切的感觉到这一年又过去了，所以啊，想抓住这一年的尾巴，抽一下自己哈哈哈哈。</p></blockquote><h4 id="一、Linux服务器介绍及购买"><a href="#一、Linux服务器介绍及购买" class="headerlink" title="一、Linux服务器介绍及购买"></a>一、Linux服务器介绍及购买</h4><ul><li><p>​    linux服务器介绍</p><p>对于linux服务器本人也知之甚少，作为一个前端菜鸟贼喜欢折腾的我，自己的服务器到期了，然后就续费被，然后就续了个linux，至于为什么要买linux系统呢？哈哈哈，我也不知道。只是听朋友说好，就这么简单。不过还是简单说一下相对于window服务器的可视化界面，linux命令行好像更符合程序员，毕竟大多程序员都喜欢带你装*带你飞（开玩笑别打我哈！！！），linux系统应该是通过一系列命令行来进行操作，这就是我对它最表面的看法。</p><ol><li>最稳定：使用Linux服务器是有意义的，因为它被认为是当今市场上最稳定的平台。您不必担心重新启动系统或不断下载更新。</li><li>性能佳：Linux也因其目前可用的任何服务器的最佳性能而闻名。使用Linux，您可以让大量用户在同一服务器上工作而不会出现任何问题。它也是用于网络目的的理想服务器。</li><li>多任务处理能力：使用Linux服务器时，您还可以执行多任务。众所周知，Linux能够处理同时运行的许多不同程序。对于其他操作系统，当您打开其他内容时，他们可能会将某些程序置于“睡眠模式”。</li><li>灵活性高：在Linux的平台被称为是非常灵活，适用于多种不同的情况。由于它来自开源程序，程序员可以根据您的需要进行自定义。凭借这种灵活性，它还使平台更加安全。</li></ol></li><li><p>购买</p><p>本人是购买的阿里云的服务器，其他服务器自行查询购买，直接进阿里云官方，直接选云服务器ECS，看需要进行购买，我的是CPU：两核，内存 4G，操作系统： CentOS 7.7 64位，然后买就完事了。</p></li></ul><h4 id="二、部署web网站"><a href="#二、部署web网站" class="headerlink" title="二、部署web网站"></a>二、部署web网站</h4><ul><li><p>部署FTP</p><p>有了Linux服务器是不是感觉不知所措不知道干什么，停下来想一想，在我们平常工作的时候网站运行的时候都需要什么？这其实就好比你在做饭之前，需要想好都需要什么食材，虽然我做的饭很难吃（还被某人说过菜的长相贼丑，黑乎乎啥也看不出……..）,回到正题是不是需要MySQL、web服务环境、FTP等各种工具。</p><hr><ol><li><p>Centos7 FTP安装与部署</p><ul><li><p>FTP安装包下载及安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start vsftpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">systemctl stop vsftpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">systemctl status vsftpd.service</span><br></pre></td></tr></table></figure></li><li><p>配置FTP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开配置文件</span></span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示行号</span></span><br><span class="line">:<span class="built_in">set</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置 12 行</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置 33 行</span></span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置48行</span></span><br><span class="line">chown_uploads=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置72行</span></span><br><span class="line">async_abor_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置82行</span></span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置83行</span></span><br><span class="line">ascii_download_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置86行</span></span><br><span class="line">ftpd_banner=Welcome to blah FTP service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置100行</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加下列内容到vsftpd.conf末尾</span></span><br><span class="line">use_localtime=YES</span><br><span class="line">listen_port=21</span><br><span class="line">idle_session_timeout=300</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vsftpd</span><br><span class="line">user_config_dir=/etc/vsftpd/vconf</span><br><span class="line">data_connection_timeout=1</span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=40010</span><br><span class="line">accept_timeout=5</span><br><span class="line">connect_timeout=1</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure></li><li><p>建立用户文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建编辑用户文件</span></span><br><span class="line">vim /etc/vsftpd/virtusers</span><br><span class="line"><span class="comment">#第一行为用户名，第二行为密码。不能使用root作为用户名 </span></span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">123456</span><br></pre></td></tr></table></figure></li><li><p>生成用户数据文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#设定PAM验证文件，并指定对虚拟用户数据库文件进行读取</span></span><br><span class="line"></span><br><span class="line">chmod 600 /etc/vsftpd/virtusers.db</span><br></pre></td></tr></table></figure></li><li><p>修改/ect/pam.d/vsftpd  文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前先备份 </span></span><br><span class="line"></span><br><span class="line">cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bak</span><br><span class="line"></span><br><span class="line">vi /etc/pam.d/vsftpd</span><br><span class="line"><span class="comment">#先将配置文件中原有的 auth 及 account 的所有配置行均注释掉</span></span><br><span class="line">auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers </span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果系统为32位，上面改为lib</span></span><br></pre></td></tr></table></figure></li><li><p>新建系统用户vsftpd，用户目录为/home/vsftpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户登录终端设为/bin/false(即：使之不能登录系统)</span></span><br><span class="line">useradd vsftpd -d /home/vsftpd -s /bin/<span class="literal">false</span></span><br><span class="line">chown -R vsftpd:vsftpd /home/vsftpd</span><br></pre></td></tr></table></figure></li><li><p>建立虚拟用户个人配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/vsftpd/vconf</span><br><span class="line"><span class="built_in">cd</span> /etc/vsftpd/vconf</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里建立虚拟用户leo配置文件</span></span><br><span class="line">touch admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑leo用户配置文件，内容如下，其他用户类似</span></span><br><span class="line">vi admin</span><br><span class="line"></span><br><span class="line">local_root=/home/vsftpd/leo/</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立leo用户根目录</span></span><br><span class="line">mkdir -p /home/vsftpd/leo/</span><br></pre></td></tr></table></figure></li><li><p>防火墙设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IPtables 的设置方式：</span><br><span class="line">vi /etc/sysconfig/iptables</span><br><span class="line"><span class="comment">#编辑iptables文件，添加如下内容，开启21端口</span></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 40000:40010 -j ACCEPT</span><br><span class="line"></span><br><span class="line">firewall 的设置方式：</span><br><span class="line">firewall-cmd --zone=public --add-service=ftp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=40000-40010/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重启vsftpd服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Centos7 FTP连接</p><ul><li><p>这个时候，使用ftp的工具连接时，我们发现是可以连接的。传输文件的时候，会发现文件上传和下载都会出现500、503 、200等问题。这个时候，可以进行以下三种操作：</p><ul><li><p>关闭SELINUX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开SELINUX配置文件</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置参数</span></span><br><span class="line"><span class="comment">#注释  </span></span><br><span class="line">SELINUX=enforcing</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加  </span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改完成后，需要重启！</span></span><br></pre></td></tr></table></figure></li><li><p>修改SELINUX</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 <span class="comment">#暂时让SELinux进入Permissive模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#列出与ftp相关的设置</span></span><br><span class="line">getsebool -a|grep ftp</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是显示出来的权限，off是关闭权限，on是打开权限。不同的机器显示的可能不一样。我看了我的显示的，和网上其他教程就不太一样</span></span><br><span class="line">ftp_home_dir --&gt; off</span><br><span class="line">ftpd_anon_write --&gt; off</span><br><span class="line">ftpd_connect_all_unreserved --&gt; off</span><br><span class="line">ftpd_connect_db --&gt; off</span><br><span class="line">ftpd_full_access --&gt; off</span><br><span class="line">ftpd_use_cifs --&gt; off</span><br><span class="line">ftpd_use_fusefs --&gt; off</span><br><span class="line">ftpd_use_nfs --&gt; off</span><br><span class="line">ftpd_use_passive_mode --&gt; off</span><br><span class="line">httpd_can_connect_ftp --&gt; off</span><br><span class="line">httpd_enable_ftp_server --&gt; off</span><br><span class="line">sftpd_anon_write --&gt; off</span><br><span class="line">sftpd_enable_homedirs --&gt; off</span><br><span class="line">sftpd_full_access --&gt; off</span><br><span class="line">sftpd_write_ssh_home --&gt; off</span><br><span class="line">tftp_anon_write --&gt; off</span><br><span class="line">tftp_home_dir --&gt; off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将包含有 ftp_home_dir 和 ftpd_full_access 相关的都设置为 1</span></span><br><span class="line"></span><br><span class="line">setsebool -P ftp_home_dir 1</span><br><span class="line">setsebool -P allow_ftpd_anon_write 1</span><br><span class="line">setsebool -P ftp_home_dir 1</span><br><span class="line"></span><br><span class="line">setenforce 1 <span class="comment">#进入Enforcing模式</span></span><br></pre></td></tr></table></figure></li><li><p>SELINUX不对vsftp不做任何限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P ftpd_connect_all_unreserved 1</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol></li><li><p>Node.js安装</p><ol><li><p>去官网复制安装包信息</p><p>[<a href="http://nodejs.cn/download/]" target="_blank" rel="noopener">http://nodejs.cn/download/]</a>: </p><p><img src="https://s1.ax1x.com/2020/07/20/UfHjnf.jpg" alt></p></li><li><p>使用xshell（推荐）或者putty连接你的Linux，在xshell里cd到安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure></li><li><p>输入命令连接开始下载node.js安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v12.14.1/node-v12.14.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>解压安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v10.16.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v10.16.0-linux-x64.tar</span><br></pre></td></tr></table></figure></li><li><p>重命名解压文件夹名称为nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv node-v10.16.0-linux-x64 nodejs</span><br></pre></td></tr></table></figure></li><li><p>进入解压目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nodejs</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s  /usr/local/nodejs/bin/node /usr/local/bin/node</span><br><span class="line">ln -s  /usr/local/nodejs/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></li><li><p>测试node是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>安装cnpm淘宝镜像并创建软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment">#检查安装成功是否通过</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用express或者koa或egg搭建web服务环境请见《初识Linux之二》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/20/UfH40O.jpg&quot; alt=&quot; 2020第一场雪 &quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好久没有更新自己的博客了，也说明自己在这几个月的时间没有怎么学习，主要吧事情真的很多(强行狡
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="node项目部署" scheme="http://yoursite.com/tags/node%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>webapck手动配置（一）</title>
    <link href="http://yoursite.com/2019/04/02/webapck-learn1/"/>
    <id>http://yoursite.com/2019/04/02/webapck-learn1/</id>
    <published>2019-04-02T14:49:11.000Z</published>
    <updated>2019-04-02T15:01:27.107Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天去面试了，但是学习还是不应该落下的，面试的过程中碰见了超级nice的云龙哥（偶像），其中聊到webpack，意识到还是很需要懂得webpack的配置信息的，于是学习一下webpack的手动配置，但是用的比较新的的node版本，不知道很多步骤是不是和webpack2.0的一致，所以肯定有很多不足 。</p></blockquote><ul><li><h4 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h4><ul><li><p>项目初始化，在你的项目目录里边初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li><li><p>新建项目结构src，里边index.js 和模块a.js </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="built_in">module</span>.exports =<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是a.js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure></li><li><p>新建index.html，用于引用 index.js </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是入口文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>但是现在我们打开index.html 文件发现浏览器并不能console出我们想要的，因为浏览器并不能支持我们的require语法，于是我们的男猪脚终于上线了，webpack主角光环，哈哈哈当然人家很强不用光环的哈，安装我们的webpack和webpack-cli模块吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webapck webapck-cli -D</span><br></pre></td></tr></table></figure></li><li><p>进行打包bulid ，npx就是从本地的node_modules找命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure></li><li><p>多了dist 文件夹 ，里面生成了main.js文件  ,现在再引用就ok了吧 ，console也出来了 ，看来主角光环就是厉害，哈哈哈</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是入口文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>另一种 跑npx 的方式  ，在package.json 的script 中添加命令,现在直接使用 npm run bulid</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "webapck"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><ul><li><p>新建webapck.config.js，webpack 默认的配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    mode:<span class="string">'development'</span>,  <span class="comment">// 开发模式 不压缩代码</span></span><br><span class="line">    entry : <span class="string">'./src/index.js'</span>, <span class="comment">// 入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        filename: <span class="string">'pack.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./kkb'</span>) <span class="comment">//需要使用绝对路径，需要引用path  打包文件夹是kkb ，文件名是 pack.js</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="配置webpack-dev-server"><a href="#配置webpack-dev-server" class="headerlink" title="配置webpack-dev-server"></a>配置webpack-dev-server</h4><ul><li><p>目前我们每次更新完，需要重新跑build ，然后再打开html 比较繁琐 ，webpack 专门安装了一个套件，webpack-dev-server</p></li><li><p>安装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure></li><li><p>配置package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "webapck",</span><br><span class="line">    "dev": "webpack-dev-server"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>配置webapck.config.js，当然0配置也是可以的</p></li></ul></li><li><h4 id="build完之后加hash过程"><a href="#build完之后加hash过程" class="headerlink" title="build完之后加hash过程"></a>build完之后加hash过程</h4><ul><li><p>在webapck.config.js 的配置中进行hash配置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">filename: &apos;pack.[hash:6].js&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="自动加载html"><a href="#自动加载html" class="headerlink" title="自动加载html"></a>自动加载html</h4><ul><li><p>当然我们build之后出现， pack.6420d5.js文件  ，那么我们html中的引用就也需要更改了，那么我们不可能没次都手动修改吧，那好我们再来进行配置</p></li><li><p>新建public文件夹，新建index.html作为我们的模板</p></li><li><p>使用html-webpack-plugin，并配置webpack-config.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebapckPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"> plugins: [</span><br><span class="line">     <span class="keyword">new</span> htmlWebapckPlugin(&#123;</span><br><span class="line">         template: <span class="string">'./public/index.html'</span>,  <span class="comment">//模板文件</span></span><br><span class="line">         filename: <span class="string">'index.html'</span> <span class="comment">// 输出文件的名字</span></span><br><span class="line">     &#125;)</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li><li><p>再执行 npm run dev  我们修改a.js 浏览器就随之修改了。跑的还是外边的index.html</p></li></ul></li><li><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ul><li>现在npm run build 就会生成一个带hash 的js和一个index.html 并且引用了这个带hash的js文件</li></ul></li><li><h4 id="支持css"><a href="#支持css" class="headerlink" title="支持css"></a>支持css</h4><ul><li><p>webpack 中所有的东西都是模块，默认require的就是js，但是css 什么的解析成js ，那是不可执行的，那就需要loader来支持配置module，但是<strong>注意</strong> use 的顺序是从右向左执行</p></li><li><p>安装css -loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader -D</span><br></pre></td></tr></table></figure></li><li><p>配置webpack-config，和plugin 平级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">//以css结尾</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/.css$/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>] <span class="comment">// 先把css解析出来,并不能直接在js文件执行，我们需要将解析出来的放进style里边，那就需要安装style-loader</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>安装style-loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader -D</span><br></pre></td></tr></table></figure></li><li><p>抽离css  ，当我们要进行单独抽离一个css 文件时，显然上边的插件并不足以满足要求，那肯定有解决的方案啊，不然说它干嘛， mini-css-extract-plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure></li><li><p>配置文件里配置被，盘它就完了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebapckPlugin(&#123;</span><br><span class="line">        template: <span class="string">'./public/index.html'</span>,  <span class="comment">//模板文件</span></span><br><span class="line">        filename: <span class="string">'index.html'</span> <span class="comment">// 输出文件的名字</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'kkb.css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">],</span><br><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">//以css结尾</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.css$/</span>,</span><br><span class="line">            use: [MiniCssExtractPlugin.loader,<span class="string">'css-loader'</span>]  <span class="comment">// 现在我们就不需要把css 塞到style里css解析完就用MiniCssExtractPlugin.loader</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>npm run build 就能看见效果了</li></ul><ul><li><h4 id="支持css预编译stylus（less、sass类似）"><a href="#支持css预编译stylus（less、sass类似）" class="headerlink" title="支持css预编译stylus（less、sass类似）"></a>支持css预编译stylus（less、sass类似）</h4><ul><li><p>stylus-loader stylus安装就完了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylus-loader stylus -D</span><br></pre></td></tr></table></figure></li><li><p>一样 来配置吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">        ......</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.styl$/</span>,</span><br><span class="line">            use: [MiniCssExtractPlugin.loader,<span class="string">'css-loader'</span>,<span class="string">'stylus-loader'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><h4 id="post-css-兼容性css"><a href="#post-css-兼容性css" class="headerlink" title="post-css 兼容性css"></a>post-css 兼容性css</h4><ul><li><p>安装postcss-loader 和autoprefixer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure></li><li><p>配置config文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [</span><br><span class="line">        <span class="comment">//以css结尾</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.css$/</span>,</span><br><span class="line">            <span class="comment">//use: ['style-loader','css-loader']  </span></span><br><span class="line">            use: [</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line">                <span class="string">'css-loader'</span>,</span><br><span class="line">                <span class="string">'postcss-loader'</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.styl$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                MiniCssExtractPlugin.loader,</span><br><span class="line">                <span class="string">'css-loader'</span>,</span><br><span class="line">                <span class="string">'postcss-loader'</span>,</span><br><span class="line">                <span class="string">'stylus-loader'</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还需要vue.config.js同级目录下新建一个postcss.config.js 对postcss进行配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h4 id="ES6-使用大名鼎鼎的babel来把ES6转换成ES5"><a href="#ES6-使用大名鼎鼎的babel来把ES6转换成ES5" class="headerlink" title="ES6 :使用大名鼎鼎的babel来把ES6转换成ES5"></a>ES6 :使用大名鼎鼎的babel来把ES6转换成ES5</h4><ul><li><p>使用babel-loader和@babel/core @babel/preset-env</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader @babel/core @babel/preset-env -D</span><br><span class="line">// babel-loader是处理js转换的loader </span><br><span class="line">//@babel/core babel核心</span><br><span class="line">//@babel/preset-env 是转换成那个级别的</span><br></pre></td></tr></table></figure></li><li><p>配置吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    ......</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">                loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                options:&#123;</span><br><span class="line">                    presets:[<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kkb</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'yuhior'</span></span><br><span class="line">  &#125;</span><br><span class="line">  sayHi()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈喽'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kkb  = <span class="keyword">new</span> Kkb()</span><br><span class="line">kkb.sayHi()  <span class="comment">//写的ES6</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li><p>js中使用图片，显然这样直接npm run dev 肯定识别不出来啊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">'./img/logo.png'</span></span><br><span class="line"><span class="keyword">let</span> image =<span class="keyword">new</span> Image()</span><br><span class="line">image.src = Logo</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(image)</span><br></pre></td></tr></table></figure></li><li><p>使用file-loader ，这样js、css 和background都支持图片了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader -D</span><br></pre></td></tr></table></figure></li><li><p>不用说了你肯定知道了 ，配置嘛谁不会说啊哈哈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    ......</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        use: [<span class="string">'file-loader'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h4 id="底层：npm-run-build-做了什么事情"><a href="#底层：npm-run-build-做了什么事情" class="headerlink" title="底层：npm run build  做了什么事情"></a>底层：npm run build  做了什么事情</h4><ul><li>build  首先去找modules 的webpack模块里边有个bin 目录，下边有个webpack.js ,里边有个installedClis函数，这里回去寻找我们装了什么，如果安装了webpack-cli 就会执行webpakc-cli下面的bin目录文件，如果安装了webapck-command就会执行这个  </li><li>webapck-cli下面有个cli.js 实际执行的是这个 </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前几天去面试了，但是学习还是不应该落下的，面试的过程中碰见了超级nice的云龙哥（偶像），其中聊到webpack，意识到还是很需要懂得webpack的配置信息的，于是学习一下webpack的手动配置，但是用的比较新的的node版本，不知道很多步骤是
      
    
    </summary>
    
      <category term="Webpack" scheme="http://yoursite.com/categories/Webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="手动配置，入门" scheme="http://yoursite.com/tags/%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
